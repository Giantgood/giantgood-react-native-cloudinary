// Generated by Apple Swift version 3.1 (swiftlang-802.0.51 clang-802.0.41)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import CoreGraphics;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

SWIFT_CLASS("_TtC10Cloudinary13CLDBaseResult")
@interface CLDBaseResult : NSObject
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull resultJson;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10Cloudinary8CLDAudio")
@interface CLDAudio : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable codec;
@property (nonatomic, readonly, copy) NSString * _Nullable channelLayout;
@end


SWIFT_CLASS("_TtC10Cloudinary20CLDBaseNetworkObject")
@interface CLDBaseNetworkObject : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end



SWIFT_CLASS("_TtC10Cloudinary14CLDBoundingBox")
@interface CLDBoundingBox : CLDBaseResult
@end

@class CLDConfiguration;
enum CLDLogLevel : NSInteger;
enum CLDImageCachePolicy : NSInteger;
@protocol CLDNetworkAdapter;
@class NSURLSessionConfiguration;
@class CLDUrl;
@class CLDUploader;
@class CLDDownloader;
@class CLDManagementApi;

SWIFT_CLASS("_TtC10Cloudinary13CLDCloudinary")
@interface CLDCloudinary : NSObject
/// Holds the configuration parameters to be used by the <code>CLDCloudinary</code> instance.
@property (nonatomic, readonly, strong) CLDConfiguration * _Nonnull config;
/// Sets Cloudinary SDK’s log level, default level is set to <em>None</em>.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) enum CLDLogLevel logLevel;)
+ (enum CLDLogLevel)logLevel SWIFT_WARN_UNUSED_RESULT;
+ (void)setLogLevel:(enum CLDLogLevel)newValue;
/// Sets Cloudinary SDK’s caching policy for images that are downloaded via the SDK’s CLDDownloader.
/// The options are: <em>None</em>, <em>Memory</em> and <em>Disk</em>. default is Disk
@property (nonatomic) enum CLDImageCachePolicy cachePolicy;
/// Sets Cloudinary SDK’s image cache maximum disk capacity.
/// default is 150 MB.
@property (nonatomic) uint64_t cacheMaxDiskCapacity;
/// Initializes the <code>CLDCloudinary</code> instance with the specified configuration and network adapter.
/// \param configuration The configuration used by this CLDCloudinary instance.
///
/// \param networkAdapter A network adapter that implements <code>CLDNetworkAdapter</code>. CLDNetworkDelegate() by default.
///
///
/// returns:
/// The new <code>CLDCloudinary</code> instance.
- (nonnull instancetype)initWithConfiguration:(CLDConfiguration * _Nonnull)configuration networkAdapter:(id <CLDNetworkAdapter> _Nullable)networkAdapter sessionConfiguration:(NSURLSessionConfiguration * _Nullable)sessionConfiguration OBJC_DESIGNATED_INITIALIZER;
/// A factory method to create a new <code>CLDUrl</code> instance
///
/// returns:
/// A new <code>CLDUrl</code> instance.
- (CLDUrl * _Nonnull)createUrl SWIFT_WARN_UNUSED_RESULT;
/// A factory method to create a new <code>CLDUploader</code> instance
///
/// returns:
/// A new <code>CLDUploader</code> instance.
- (CLDUploader * _Nonnull)createUploader SWIFT_WARN_UNUSED_RESULT;
/// A factory method to create a new <code>CLDDownloader</code> instance
///
/// returns:
/// A new <code>CLDDownloader</code> instance.
- (CLDDownloader * _Nonnull)createDownloader SWIFT_WARN_UNUSED_RESULT;
/// A factory method to create a new <code>CLDAdminApi</code> instance
///
/// returns:
/// A new <code>CLDAdminApi</code> instance.
- (CLDManagementApi * _Nonnull)createManagementApi SWIFT_WARN_UNUSED_RESULT;
/// The maximum number of queued downloads that can execute at the same time.
/// default is NSOperationQueueDefaultMaxConcurrentOperationCount.
/// \param maxConcurrentDownloads The maximum concurrent downloads to allow.
///
- (void)setMaxConcurrentDownloads:(NSInteger)maxConcurrentDownloads SWIFT_AVAILABILITY(ios,introduced=8.0);
/// Set a completion handler provided by the UIApplicationDelegate <code>application:handleEventsForBackgroundURLSession:completionHandler:</code> method.
/// The handler will be called automatically once the session finishes its events for background URL session.
/// default is <code>nil</code>.
- (void)setBackgroundCompletionHandler:(void (^ _Nullable)(void))newValue SWIFT_AVAILABILITY(ios,introduced=8.0);
/// Sets the “USER-AGENT” HTTP header on all network requests to be <em>“PlatformName/ver CloudinaryiOS/ver”</em>
/// By default the header is set to <em>“CloudinaryiOS/ver”</em>
- (void)setUserPlatform:(NSString * _Nonnull)platformName version:(NSString * _Nonnull)version;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// The CLDConfiguration class holds the configuration parameters to be used by the <code>CLDCloudinary</code> instance.
SWIFT_CLASS("_TtC10Cloudinary16CLDConfiguration")
@interface CLDConfiguration : NSObject
/// Your account’s cloud name on Cloudinary.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified cloudName;
/// Your account’s API key, can be found in your account’s dashboard on Cloudinary as part of the account details.
@property (nonatomic, readonly, copy) NSString * _Nullable apiKey;
/// Your account’s API secret, can be found in your account’s dashboard on Cloudinary as part of the account details.
@property (nonatomic, readonly, copy) NSString * _Nullable apiSecret;
/// A boolean value specifying whether or not to use a private CDN. false by default.
@property (nonatomic, readonly) BOOL privateCdn;
/// A boolean value specifying whether or not to use a secure CDN connection. false by default.
@property (nonatomic, readonly) BOOL secure;
/// A boolean value specifying whether or not to use a CDN subdomain. false by default.
@property (nonatomic, readonly) BOOL cdnSubdomain;
/// A boolean value specifying whether or not to use a secure connection with a CDN subdomain. false by default.
@property (nonatomic, readonly) BOOL secureCdnSubdomain;
/// Your secure distribution domain to be set when using a secure distribution (advanced plan only). nil by default.
@property (nonatomic, readonly, copy) NSString * _Nullable secureDistribution;
/// Your custom domain. nil by default.
@property (nonatomic, readonly, copy) NSString * _Nullable cname;
/// A custom upload prefix to be used instead of Cloudinary’s default API prefix. nil by default.
@property (nonatomic, readonly, copy) NSString * _Nullable uploadPrefix;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Initializes a CLDConfiguration instance, using the URL specified in the environment parameters under <code>CLOUDINARY_URL</code>.
/// The URL should be in this form: <code>cloudinary://<API_KEY>:<API_SECRET>@<CLOUD_NAME></code>.
/// Extra parameters may be added to the url: <code>secure</code> (boolean), <code>cdn_subdomain</code> (boolean), <code>secure_cdn_distribution</code> (boolean), <code>cname</code>, <code>upload_prefix</code>
///
/// returns:
/// A new <code>CLDConfiguration</code> instance if the environment parameter URL exists and is valid, otherwise returns nil.
+ (CLDConfiguration * _Nullable)initWithEnvParams SWIFT_METHOD_FAMILY(none) SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithOptions:(NSDictionary<NSString *, id> * _Nonnull)options OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDConfiguration instance with the specified parameters.
/// \param cloudName Your account’s cloud name on Cloudinary.
///
/// \param apiKey Your account’s API key, can be found in your account’s dashboard on Cloudinary as part of the account details.
///
/// \param apiSecret Your account’s API secret, can be found in your account’s dashboard on Cloudinary as part of the account details.
///
/// \param privateCdn A boolean value specifying whether or not to use a private CDN. false by default.
///
/// \param secure A boolean value specifying whether or not to use a secure CDN connection. false by default.
///
/// \param cdnSubdomain A boolean value specifying whether or not to use a CDN subdomain. false by default.
///
/// \param secureCdnSubdomain A boolean value specifying whether or not to use a secure connection with a CDN subdomain. false by default.
///
/// \param secureDistribution Set your secure distribution domain to be set when using a secure distribution (advanced plan only). nil by default.
///
/// \param cname Set your custom domain. nil by default.
///
/// \param uploadPrefix Set a custom upload prefix to be used instead of Cloudinary’s default API prefix. nil by default.
///
///
/// returns:
/// A new <code>CLDConfiguration</code> instance.
- (nonnull instancetype)initWithCloudName:(NSString * _Nonnull)cloudName apiKey:(NSString * _Nullable)apiKey apiSecret:(NSString * _Nullable)apiSecret privateCdn:(BOOL)privateCdn secure:(BOOL)secure cdnSubdomain:(BOOL)cdnSubdomain secureCdnSubdomain:(BOOL)secureCdnSubdomain secureDistribution:(NSString * _Nullable)secureDistribution cname:(NSString * _Nullable)cname uploadPrefix:(NSString * _Nullable)uploadPrefix OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDConfiguration instance, using a given URL.
/// The URL should be in this form: <code>cloudinary://<API_KEY>:<API_SECRET>@<CLOUD_NAME></code>.
/// Extra parameters may be added to the url: <code>secure</code> (boolean), <code>cdn_subdomain</code> (boolean), <code>secure_cdn_distribution</code> (boolean), <code>cname</code>, <code>upload_prefix</code>
///
/// returns:
/// A new <code>CLDConfiguration</code> instance if the URL is valid, otherwise returns nil.
- (nullable instancetype)initWithCloudinaryUrl:(NSString * _Nonnull)cloudinaryUrl OBJC_DESIGNATED_INITIALIZER;
@end


/// The CLDCoordinate class represents a rectangle area on an asset.
SWIFT_CLASS("_TtC10Cloudinary13CLDCoordinate")
@interface CLDCoordinate : NSObject
/// Initializes the CLDCoordinate using a CGRect.
/// \param rect The rectangle representing an area on the asset.
///
///
/// returns:
/// A new CLDCoordinate instance.
- (nonnull instancetype)initWithRect:(CGRect)rect OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC10Cloudinary14CLDCoordinates")
@interface CLDCoordinates : CLDBaseResult
@property (nonatomic, readonly, strong) id _Nullable custom;
@property (nonatomic, readonly, strong) id _Nullable faces;
@end

enum CLDUrlResourceType : NSInteger;
@class CLDSignature;

/// The CLDRequestParams class is a base class for all different request params object.
/// It holds a dictionary of the actual params, the request’s resource type, the request signature for signing a request using an externaly generated signature, and the subclass’ representing action.
SWIFT_CLASS("_TtC10Cloudinary16CLDRequestParams")
@interface CLDRequestParams : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// A generic setter to manualy set a param.
/// \param key The key of parameter to set.
///
/// \param value The parameter value.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (CLDRequestParams * _Nonnull)setParam:(NSString * _Nonnull)key value:(id _Nullable)value;
- (CLDRequestParams * _Nonnull)setResourceTypeFromUrlResourceType:(enum CLDUrlResourceType)resourceType;
- (CLDRequestParams * _Nonnull)setResourceTypeFromString:(NSString * _Nonnull)resourceType;
- (CLDRequestParams * _Nonnull)setSignatureWithSignature:(CLDSignature * _Nonnull)signature;
/// A generic getter to retrieve a param for a given key.
/// \param key The key of the parameter to retrieve.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (id _Nullable)getParam:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


/// This class represents the different parameters that can be passed when performing a <code>delete by token</code> request.
SWIFT_CLASS("_TtC10Cloudinary29CLDDeleteByTokenRequestParams")
@interface CLDDeleteByTokenRequestParams : CLDRequestParams
/// Initializes a CLDDeleteByTokenRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDDeleteByTokenRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
@end

@class NSError;

/// The <code>CLDRequest</code> object is returned when creating a network request using one of Cloudinary’s API calls.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary10CLDRequest")
@interface CLDRequest : NSObject
/// Resume the request.
- (void)resume;
/// Suspend the request.
- (void)suspend;
/// Cancel the request.
- (void)cancel;
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDRequest.
- (CLDRequest * _Nonnull)responseRaw:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class CLDDeleteResult;

/// The <code>CLDExplodeRequest</code> object is returned when creating an explode request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary16CLDDeleteRequest")
@interface CLDDeleteRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDDeleteRequest.
- (CLDDeleteRequest * _Nonnull)response:(void (^ _Nullable)(CLDDeleteResult * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC10Cloudinary15CLDDeleteResult")
@interface CLDDeleteResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable result;
@end


SWIFT_CLASS("_TtC10Cloudinary10CLDDerived")
@interface CLDDerived : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable transformation;
@property (nonatomic, readonly, copy) NSString * _Nullable format;
@property (nonatomic, readonly, copy) NSString * _Nullable identifier;
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable secureUrl;
@end

enum CLDType : NSInteger;

/// This class represents the different parameters that can be passed when performing a destroy request.
SWIFT_CLASS("_TtC10Cloudinary23CLDDestroyRequestParams")
@interface CLDDestroyRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDDestroyRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDDestroyRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Set the specific file type of the resource using one of the available options from CLDType.
/// \param type The file type to set.
///
///
/// returns:
/// The same instance of CLDDestroyRequestParams.
- (nonnull instancetype)setTypeWithType:(enum CLDType)type;
/// Set the specific file type of the resource.
/// \param type The specific file type of the resource.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setType:(NSString * _Nonnull)type;
/// Set boolean parameter indicating whether or not the asset should be invalidated through the CDN. default is false.
/// \param invalidate The boolean parameter.
///
///
/// returns:
/// The same instance of CLDDestroyRequestParams.
- (nonnull instancetype)setInvalidate:(BOOL)invalidate;
@end

@class CLDRekognitionFace;

SWIFT_CLASS("_TtC10Cloudinary12CLDDetection")
@interface CLDDetection : CLDBaseResult
@property (nonatomic, readonly, strong) CLDRekognitionFace * _Nullable rekognitionFace;
@end

@class NSProgress;
@class UIImage;
@protocol CLDFetchImageRequest;

/// The CLDDownloader class is used to asynchronously fetch images either from the image cache if they exist or download them from a remote source.
SWIFT_CLASS("_TtC10Cloudinary13CLDDownloader")
@interface CLDDownloader : CLDBaseNetworkObject
/// Asynchronously fetches a remote image from the specified URL.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param url The image URL to download.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the retrieved UIImage or the error.
///
///
/// returns:
/// A <code>CLDFetchImageRequest</code> instance to be used to get the fetched image from, or to get the download progress or cancel the task.
- (id <CLDFetchImageRequest> _Nonnull)fetchImage:(NSString * _Nonnull)url :(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC10Cloudinary14CLDEagerResult")
@interface CLDEagerResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable secureUrl;
@end

@class CLDExplicitResult;

/// The <code>CLDExplodeRequest</code> object is returned when creating an explode request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary18CLDExplicitRequest")
@interface CLDExplicitRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDExplicitRequest.
- (CLDExplicitRequest * _Nonnull)response:(void (^ _Nullable)(CLDExplicitResult * _Nullable, NSError * _Nullable))completionHandler;
@end

enum CLDModeration : NSInteger;
@class CLDTransformation;
@class CLDResponsiveBreakpoints;

/// This class represents the different parameters that can be passed when performing an upload request.
/// For more information see the <a href="http://cloudinary.com/documentation/image_upload_api_reference#upload">documentation</a>.
SWIFT_CLASS("_TtC10Cloudinary22CLDUploadRequestParams")
@interface CLDUploadRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDUploadRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDUploadRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nullable publicId;
@property (nonatomic, readonly, copy) NSString * _Nullable format;
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable notificationUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable eagerNotificationUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable proxy;
@property (nonatomic, readonly, copy) NSString * _Nullable folder;
@property (nonatomic, readonly, copy) NSString * _Nullable moderation;
@property (nonatomic, readonly, copy) NSString * _Nullable rawConvert;
@property (nonatomic, readonly, copy) NSString * _Nullable detection;
@property (nonatomic, readonly, copy) NSString * _Nullable categorization;
@property (nonatomic, readonly, copy) NSString * _Nullable similaritySearch;
@property (nonatomic, readonly, copy) NSString * _Nullable autoTagging;
@property (nonatomic, readonly, copy) NSString * _Nullable transformation;
@property (nonatomic, readonly, copy) NSString * _Nullable tags;
@property (nonatomic, readonly, copy) NSString * _Nullable allowedFormats;
@property (nonatomic, readonly, copy) NSString * _Nullable context;
@property (nonatomic, readonly, copy) NSString * _Nullable faceCoordinates;
@property (nonatomic, readonly, copy) NSString * _Nullable customCoordinates;
@property (nonatomic, readonly, copy) NSString * _Nullable eager;
@property (nonatomic, readonly, copy) NSString * _Nullable headers;
/// Set the identifier that is used for accessing the uploaded resource.
/// A randomly generated ID is assigned if not specified. The Public ID may contain a full path including folders separated by a slash (/).
/// \param publicId The identifier to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setPublicId:(NSString * _Nonnull)publicId;
/// Set an optional format to convert the uploaded resource to before saving in the cloud. For example: jpg.
/// \param format The format to convert to.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setFormat:(NSString * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
/// Allows uploading resources as ‘private’ or ‘authenticated’ instead of the default public mode.
/// \param type The type to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setTypeFromType:(enum CLDType)type SWIFT_WARN_UNUSED_RESULT;
/// Allows uploading resources as ‘private’ or ‘authenticated’ instead of the default public mode.
/// \param type The type to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setType:(NSString * _Nonnull)type;
/// Set an HTTP URL to send notification to (a webhook) when the upload is completed.
/// \param notificationUrl The URL to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setNotificationUrl:(NSString * _Nonnull)notificationUrl SWIFT_WARN_UNUSED_RESULT;
/// Set an HTTP URL to send notification to (a webhook) when the generation of eager transformations is completed.
/// \param eagerNotificationUrl The URL to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setEagerNotificationUrl:(NSString * _Nonnull)eagerNotificationUrl SWIFT_WARN_UNUSED_RESULT;
/// Tells Cloudinary to upload resources from remote URLs through the given proxy. Format: http://hostname:port.
/// \param proxy The proxy URL.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setProxy:(NSString * _Nonnull)proxy SWIFT_WARN_UNUSED_RESULT;
/// Set an optional folder name where the uploaded resource will be stored. The Public ID contains the full path of the uploaded resource, including the folder name.
/// \param folder The folder URL.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setFolder:(NSString * _Nonnull)folder SWIFT_WARN_UNUSED_RESULT;
/// Set to manual to add the uploaded image to a queue of pending moderation images that can be moderated using the Admin API or the Cloudinary Management Console.
/// Set to webpurify to automatically moderate the uploaded image using the WebPurify Image Moderation add-on.
/// \param moderation The moderation to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setModerationFromModeration:(enum CLDModeration)moderation;
/// Set to manual to add the uploaded image to a queue of pending moderation images that can be moderated using the <a href="https://cloudinary.com/console/media_library">Cloudinary Management Console</a>.
/// Set to webpurify to automatically moderate the uploaded image using the <a href="http://dev.cloudinary.com:3002/documentation/webpurify_image_moderation_addon">WebPurify Image Moderation add-on</a>.
/// \param moderation The moderation to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setModeration:(NSString * _Nonnull)moderation SWIFT_WARN_UNUSED_RESULT;
/// Set to aspose to automatically convert Office documents to PDF files and other image formats using the <a href="http://dev.cloudinary.com:3002/documentation/aspose_document_conversion_addon">Aspose Document Conversion add-on</a>.
/// \param rawConvert The rawConvert to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setRawConvert:(NSString * _Nonnull)rawConvert;
/// Set to adv_face to extract an extensive list of face attributes from a image using the <a href="http://cloudinary.com/documentation/advanced_facial_attributes_detection_addon">Advanced Facial Attribute Detection add-on</a>.
/// \param detection The detection to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setDetection:(NSString * _Nonnull)detection;
/// By setting the categorization parameter to imagga_tagging, Imagga is used to automatically classify the scenes of the uploaded image.
/// \param categorization The categorization to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setCategorization:(NSString * _Nonnull)categorization;
/// \param similaritySearch The similarity search to set.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setSimilaritySearch:(NSString * _Nonnull)similaritySearch;
/// Set whether to assign tags to an image according to detected scene categories with a confidence score higher than the given value (between 0.0 and 1.0).
/// See <a href="http://dev.cloudinary.com:3002/documentation/imagga_auto_tagging_addon">Imagga Auto Tagging</a> for more details.
/// \param autoTagging The auto tagging parameter to use.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAutoTaggingWithDouble:(double)autoTagging;
/// Set whether to assign tags to an image according to detected scene categories with a confidence score higher than the given value (between 0.0 and 1.0).
/// See <a href="http://dev.cloudinary.com:3002/documentation/imagga_auto_tagging_addon">Imagga Auto Tagging</a> for more details.
/// \param autoTagging The auto tagging parameter to use.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAutoTagging:(NSString * _Nonnull)autoTagging;
/// Set A boolean parameter that determines whether to backup the uploaded resource. Overrides the default backup settings of your account.
/// \param backup The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setBackup:(BOOL)backup;
/// Set A boolean parameter that determines whether to use the original file name of the uploaded resource if available for the Public ID.
/// The file name is normalized and random characters are appended to ensure uniqueness. Default: false.
/// \param useFilename The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setUseFilename:(BOOL)useFilename;
/// When set to false, should not add random characters at the end of the filename that guarantee its uniqueness. Only relevant if use_filename is also set to true. Default: true.
/// \param uniqueFilename The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setUniqueFilename:(BOOL)uniqueFilename;
/// Set A boolean parameter that determines whether to discard the name of the original uploaded file.
/// Relevant when delivering resources as attachments (setting the flag transformation parameter to attachment).
/// Default: false.
/// \param discardOriginalFilename The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setDiscardOriginalFilename:(BOOL)discardOriginalFilename;
/// Set A boolean parameter that determines whether to generate the eager transformations asynchronously in the background. default is false.
/// \param eagerAsync The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setEagerAsync:(BOOL)eagerAsync;
/// Set boolean parameter indicating whether or not the asset should be invalidated through the CDN. default is false.
/// \param invalidate The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setInvalidate:(BOOL)invalidate;
/// Set boolean parameter indicating whether to overwrite existing resources with the same Public ID. When set to false, return immediately if a resource with the same Public ID was found.
/// Default: true (when using unsigned upload, the default is false and cannot be changed to true).
/// \param overwrite The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setOverwrite:(BOOL)overwrite;
/// Set a boolean parameter indicating whether to retrieve IPTC and detailed Exif metadata of the uploaded asset. default is false.
/// \param imageMetadata The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setImageMetadata:(BOOL)imageMetadata;
/// Set a boolean parameter indicating whether to retrieve predominant colors & color histogram of the uploaded asset. default is false.
/// \param colors The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setColors:(BOOL)colors;
/// Set a boolean parameter indicating whether to return the perceptual hash (pHash) on the uploaded asset.
/// The pHash acts as a fingerprint that allows checking image similarity. default is false.
/// \param phash The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setPhash:(BOOL)phash;
/// Set a boolean parameter indicating whether to return the coordinates of faces contained in an uploaded asset (automatically detected or manually defined).
/// Each face is specified by the X & Y coordinates of the top left corner and the width & height of the face. default is false.
/// \param faces The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setFaces:(BOOL)faces;
/// Set a boolean parameter indicating whether to return a deletion token in the upload response.
/// The token can be used to delete the uploaded resource within 10 minutes using an unauthenticated API request.
/// Default: false.
/// \param returnDeleteToken The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setReturnDeleteToken:(BOOL)returnDeleteToken;
/// Set the upload preset.
/// For more information see the <a href="http://cloudinary.com/documentation/upload_images#unsigned_upload">documentation</a>.
/// \param uploadPreset The upload preset from your account settings.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setUploadPreset:(NSString * _Nonnull)uploadPreset;
/// Apply an incoming transformation as part of the upload request.
/// Any image transformation parameter can be specified as an option in the upload call and these transformations are applied before saving the image in the cloud.
/// For more information see the <a href="http://cloudinary.com/documentation/upload_images#incoming_transformations">documentation</a>.
/// \param transformation The transformation to apply on the uploaded asset.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setTransformationFromTransformation:(CLDTransformation * _Nonnull)transformation;
/// Apply an incoming transformation as part of the upload request.
/// Any image transformation parameter can be specified as an option in the upload call and these transformations are applied before saving the image in the cloud.
/// For more information see the <a href="http://cloudinary.com/documentation/upload_images#incoming_transformations">documentation</a>.
/// \param transformation The transformation to apply on the uploaded asset.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setTransformation:(NSString * _Nonnull)transformation;
/// Assign tags to the uploaded files.
/// For more information see the <a href="http://cloudinary.com/documentation/upload_images#tagging_images">documentation</a>.
/// \param tags The tags to aggign to the uploaded asset.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setTagsWithArray:(NSArray<NSString *> * _Nonnull)tags;
/// Assign tags to the uploaded files.
/// For more information see the <a href="http://cloudinary.com/documentation/upload_images#tagging_images">documentation</a>.
/// \param tags The tags to aggign to the uploaded asset.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setTags:(NSString * _Nonnull)tags;
/// Set An array of file formats that are allowed for uploading.
/// The default is any supported image format for images, and any kind of raw file.
/// Files of other types will be rejected.
/// The formats can be any combination of image types, video formats or raw file extensions.
/// For example: <code>mp4,ogv,jpg,png,pdf</code>
/// \param allowedFormats The array of allowed formats.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAllowedFormatsWithArray:(NSArray<NSString *> * _Nonnull)allowedFormats;
/// Set An array of file formats that are allowed for uploading.
/// The default is any supported image format for images, and any kind of raw file.
/// Files of other types will be rejected.
/// The formats can be any combination of image types, video formats or raw file extensions.
/// For example: <code>mp4,ogv,jpg,png,pdf</code>
/// \param allowedFormats The array of allowed formats.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setAllowedFormats:(NSString * _Nonnull)allowedFormats;
/// Set a dictionary of the key-value pairs of general textual context metadata to attach to an uploaded resource.
/// The context values of uploaded files are available for fetching using the Admin API.
/// For example: <code>alt=My image❘caption=Profile image</code>.
/// \param context The context dictionary.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setContextFromDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)context;
/// Set a dictionary of the key-value pairs of general textual context metadata to attach to an uploaded resource.
/// The context values of uploaded files are available for fetching using the Admin API.
/// For example: <code>alt=My image❘caption=Profile image</code>.
/// \param context The context dictionary.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setContext:(NSString * _Nonnull)context;
/// Sets the coordinates of faces contained in an uploaded image and overrides the automatically detected faces.
/// Each face is specified by the X & Y coordinates of the top left corner and the width & height of the face.
/// \param faceCoordinates The array of <code>CLDCoodinate</code> objects, each object holds a CGRect for a single face coordinate.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setFaceCoordinatesFromCoordinates:(NSArray<CLDCoordinate *> * _Nonnull)faceCoordinates;
/// Sets the coordinates of faces contained in an uploaded image and overrides the automatically detected faces.
/// Each face is specified by the X & Y coordinates of the top left corner and the width & height of the face.
/// \param faceCoordinates The array of <code>CLDCoodinate</code> objects, each object holds a CGRect for a single face coordinate.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setFaceCoordinates:(NSString * _Nonnull)faceCoordinates;
/// Sets the coordinates of a region contained in an uploaded image that is subsequently used for cropping uploaded images using the custom gravity mode.
/// The region is specified by the X & Y coordinates of the top left corner and the width & height of the region.
/// \param customCoordinates The array of <code>CLDCoodinate</code> objects, each object holds a CGRect for a single custom coordinate.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setCustomCoordinatesFromCoordinates:(NSArray<CLDCoordinate *> * _Nonnull)customCoordinates;
/// Sets the coordinates of a region contained in an uploaded image that is subsequently used for cropping uploaded images using the custom gravity mode.
/// The region is specified by the X & Y coordinates of the top left corner and the width & height of the region.
/// \param customCoordinates The array of <code>CLDCoodinate</code> objects, each object holds a CGRect for a single custom coordinate.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setCustomCoordinates:(NSString * _Nonnull)customCoordinates;
/// Set an array of transformations to create for the uploaded resource during the upload process, instead of lazily creating each of them when first accessed by your site’s visitors.
/// \param eager The array of transformations.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setEagerFromTransformationArray:(NSArray<CLDTransformation *> * _Nonnull)eager;
/// Set an array of transformations to create for the uploaded resource during the upload process, instead of lazily creating each of them when first accessed by your site’s visitors.
/// \param eager The array of transformations.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setEager:(NSString * _Nonnull)eager;
/// Set an array of headers lines for returning as response HTTP headers when delivering the uploaded resource to your users.
/// Supported headers: <code>Link, X-Robots-Tag</code>.
/// For example: <code>X-Robots-Tag: noindex</code>.
/// \param headers The array of headers.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setHeadersWithDictionary:(NSDictionary<NSString *, NSString *> * _Nonnull)headers;
/// Set an array of headers lines for returning as response HTTP headers when delivering the uploaded resource to your users.
/// Supported headers: <code>Link, X-Robots-Tag</code>.
/// For example: <code>X-Robots-Tag: noindex</code>.
/// \param headers The array of headers.
///
///
/// returns:
/// The same instance of CLDUploadRequestParams.
- (nonnull instancetype)setHeaders:(NSString * _Nonnull)headers;
/// Requests that Cloudinary automatically find the best breakpoints, using an array of CLDResponsiveBreakpoints objects.
/// \param responsiveBreakpoints The array of responsive breakpoints setting.
///
///
/// returns:
/// The same instance of CLDExplicitRequestParams.
- (nonnull instancetype)setResponsiveBreakpoints:(NSArray<CLDResponsiveBreakpoints *> * _Nonnull)responsiveBreakpoints;
@end


/// This class represents the different parameters that can be passed when performing an <code>explicit</code> request.
SWIFT_CLASS("_TtC10Cloudinary24CLDExplicitRequestParams")
@interface CLDExplicitRequestParams : CLDUploadRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDExplicitRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDExplicitRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
@end

@class CLDInfo;
@class CLDVideo;

SWIFT_CLASS("_TtC10Cloudinary15CLDUploadResult")
@interface CLDUploadResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable publicId;
@property (nonatomic, readonly, copy) NSString * _Nullable version;
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable secureUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable resourceType;
@property (nonatomic, readonly, copy) NSString * _Nullable signature;
@property (nonatomic, readonly, copy) NSString * _Nullable createdAt;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
@property (nonatomic, readonly, strong) id _Nullable moderation;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSDictionary<NSString *, NSString *> *> * _Nullable context;
@property (nonatomic, readonly, copy) NSString * _Nullable format;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable exif;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, readonly, strong) id _Nullable faces;
@property (nonatomic, readonly, strong) id _Nullable colors;
@property (nonatomic, readonly, copy) NSString * _Nullable phash;
@property (nonatomic, readonly, copy) NSString * _Nullable deleteToken;
@property (nonatomic, readonly, strong) CLDInfo * _Nullable info;
@property (nonatomic, readonly, strong) CLDVideo * _Nullable video;
@property (nonatomic, readonly, strong) CLDAudio * _Nullable audio;
@end


SWIFT_CLASS("_TtC10Cloudinary17CLDExplicitResult")
@interface CLDExplicitResult : CLDUploadResult
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSArray<CLDEagerResult *> * _Nullable eager;
@end

@class CLDExplodeResult;

/// The <code>CLDExplodeRequest</code> object is returned when creating an explode request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary17CLDExplodeRequest")
@interface CLDExplodeRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDExplodeRequest.
- (CLDExplodeRequest * _Nonnull)response:(void (^ _Nullable)(CLDExplodeResult * _Nullable, NSError * _Nullable))completionHandler;
@end


/// This class represents the different parameters that can be passed when performing an <code>explode</code> request.
SWIFT_CLASS("_TtC10Cloudinary23CLDExplodeRequestParams")
@interface CLDExplodeRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDExplodeRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDExplodeRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Set the specific file type of the resource.
/// \param type The specific file type of the resource.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setTypeWithType:(enum CLDType)type;
/// Set the specific file type of the resource.
/// \param type The specific file type of the resource.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setType:(NSString * _Nonnull)type;
/// Set a format to convert the images before storing them in your Cloudinary account. default is jpg.
/// \param format The format to convert to.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setFormat:(NSString * _Nonnull)format;
/// Set a boolean parameter indicating whether to perform the image generation in the background (asynchronously). default is false.
/// \param async The boolean parameter.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setAsync:(BOOL)async;
/// Set an HTTP or HTTPS URL to notify your application (a webhook) when the process has completed.
/// \param notificationUrl The URL.
///
///
/// returns:
/// The same instance of CLDExplodeRequestParams.
- (nonnull instancetype)setNotificationUrl:(NSString * _Nonnull)notificationUrl;
@end


SWIFT_CLASS("_TtC10Cloudinary16CLDExplodeResult")
@interface CLDExplodeResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable status;
@property (nonatomic, readonly, copy) NSString * _Nullable batchId;
@end


SWIFT_CLASS("_TtC10Cloudinary7CLDFace")
@interface CLDFace : CLDBaseResult
@property (nonatomic, readonly, strong) CLDBoundingBox * _Nullable boundingBox;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nullable race;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nullable emotion;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nullable quality;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSNumber *> * _Nullable pose;
@end


/// The <code>CLDNetworkRequest</code> protocol is returned when creating a network request using one of Cloudinary’s API calls.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_PROTOCOL("_TtP10Cloudinary17CLDNetworkRequest_")
@protocol CLDNetworkRequest
/// Resume the request.
- (void)resume;
/// Suspend the request.
- (void)suspend;
/// Cancel the request.
- (void)cancel;
@end


/// The <code>CLDNetworkDataRequest</code> protocol is returned when creating a data transfer request to Cloudinary, e.g. uploading a file.
/// It allows the options to add a progress closure that is called periodically during the transfer
/// and a response closure to be called once the transfer has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_PROTOCOL("_TtP10Cloudinary21CLDNetworkDataRequest_")
@protocol CLDNetworkDataRequest <CLDNetworkRequest>
/// Set a progress closure that is called periodically during the data transfer.
/// \param progress The closure that is called periodically during the data transfer.
///
///
/// returns:
/// The same instance of CLDNetworkDataRequest.
- (id <CLDNetworkDataRequest> _Nonnull)progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress;
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDNetworkRequest.
- (id <CLDNetworkRequest> _Nonnull)response:(void (^ _Nullable)(id _Nullable, NSError * _Nullable))completionHandler;
@end


/// The <code>CLDFetchImageRequest</code> protocol is returned when creating a fetch image request.
/// It allows the option to set a closure returning the fetched image when its available.
/// The protocol also allows the options to add a progress closure that is called periodically during the download,
/// as well as cancelling the request.
SWIFT_PROTOCOL("_TtP10Cloudinary20CLDFetchImageRequest_")
@protocol CLDFetchImageRequest <CLDNetworkDataRequest>
/// Set a response closure to be called once the fetch image request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the retrieved UIImage or the error.
///
///
/// returns:
/// The same instance of CLDFetchImageRequest.
- (id <CLDFetchImageRequest> _Nonnull)responseImage:(void (^ _Nullable)(UIImage * _Nullable, NSError * _Nullable))completionHandler;
@end

typedef SWIFT_ENUM(NSInteger, CLDFontStyle) {
  CLDFontStyleNormal = 0,
  CLDFontStyleItalic = 1,
};

typedef SWIFT_ENUM(NSInteger, CLDFontWeight) {
  CLDFontWeightNormal = 0,
  CLDFontWeightBold = 1,
};

typedef SWIFT_ENUM(NSInteger, CLDImageCachePolicy) {
  CLDImageCachePolicyNone = 0,
  CLDImageCachePolicyMemory = 1,
  CLDImageCachePolicyDisk = 2,
};


SWIFT_CLASS("_TtC10Cloudinary12CLDImageInfo")
@interface CLDImageInfo : CLDBaseResult
@end


SWIFT_CLASS("_TtC10Cloudinary7CLDInfo")
@interface CLDInfo : CLDBaseResult
@property (nonatomic, readonly, strong) CLDDetection * _Nullable detection;
@end

enum LayerResourceType : NSInteger;

/// The CLDLayer is used to help adding an overlay or underlay layer to a transformation.
SWIFT_CLASS("_TtC10Cloudinary8CLDLayer")
@interface CLDLayer : NSObject
/// Initialize a CLDLayer instance.
/// -returns: The new CLDLayer instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// The identifier of the image to use as a layer.
/// \param publicId The identifier of the image to use as a layer.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setPublicIdWithPublicId:(NSString * _Nonnull)publicId SWIFT_WARN_UNUSED_RESULT;
/// The format of the image to use as a layer.
/// \param format The format of the image to use as a layer.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setFormatWithFormat:(NSString * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
/// Set the layer resource type.
/// \param resourceType The layer resource type.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setResourceTypeFromLayerResourceType:(enum LayerResourceType)resourceType SWIFT_WARN_UNUSED_RESULT;
/// Set the layer resource type.
/// \param resourceType The layer resource type.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setResourceTypeFromString:(NSString * _Nonnull)resourceType SWIFT_WARN_UNUSED_RESULT;
/// Set the layer type.
/// \param type The layer type.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setTypeFromType:(enum CLDType)type SWIFT_WARN_UNUSED_RESULT;
/// Set the layer type.
/// \param type The layer type.
///
///
/// returns:
/// The same instance of CLDLayer.
- (CLDLayer * _Nonnull)setTypeFromString:(NSString * _Nonnull)rawType SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, LayerResourceType) {
  LayerResourceTypeImage = 0,
  LayerResourceTypeRaw = 1,
  LayerResourceTypeAuto = 2,
  LayerResourceTypeText = 3,
  LayerResourceTypeSubtitles = 4,
  LayerResourceTypeVideo = 5,
};

typedef SWIFT_ENUM(NSInteger, CLDLogLevel) {
  CLDLogLevelTrace = 0,
  CLDLogLevelDebug = 1,
  CLDLogLevelInfo = 2,
  CLDLogLevelWarning = 3,
  CLDLogLevelError = 4,
  CLDLogLevelNone = 5,
};

@class CLDTagsRequestParams;
@class CLDTagResult;
@class CLDTagRequest;
@class CLDSpriteRequestParams;
@class CLDSpriteResult;
@class CLDSpriteRequest;
@class CLDMultiRequestParams;
@class CLDMultiResult;
@class CLDMultiRequest;
@class CLDTextRequestParams;
@class CLDTextResult;
@class CLDTextRequest;

/// The CLDManagementApi class is used to perform the available methods for managing your cloud assets.
SWIFT_CLASS("_TtC10Cloudinary16CLDManagementApi")
@interface CLDManagementApi : CLDBaseNetworkObject
/// Immediately and permanently delete assets from your Cloudinary account
/// \param publicId The identifier of the asset to remove.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDDeleteRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDDeleteRequest * _Nonnull)destroy:(NSString * _Nonnull)publicId params:(CLDDestroyRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDDeleteResult * _Nullable, NSError * _Nullable))completionHandler;
/// Add a tag to one or more assets in your cloud.
/// Tags are used to categorize and organize your images, and can also be used to apply group actions to images,
/// for example to delete images, create sprites, ZIP files, JSON lists, or animated GIFs.
/// Each image can be assigned one or more tags, which is a short name that you can dynamically use (no need to predefine tags).
/// \param tag The tag to assign.
///
/// \param publicIds An array of Public IDs of images uploaded to Cloudinary.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDTagRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDTagRequest * _Nonnull)addTag:(NSString * _Nonnull)tag publicIds:(NSArray<NSString *> * _Nonnull)publicIds params:(CLDTagsRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDTagResult * _Nullable, NSError * _Nullable))completionHandler;
/// Remove a tag to one or more assets in your cloud.
/// Tags are used to categorize and organize your images, and can also be used to apply group actions to images,
/// for example to delete images, create sprites, ZIP files, JSON lists, or animated GIFs.
/// Each image can be assigned one or more tags, which is a short name that you can dynamically use (no need to predefine tags).
/// \param tag The tag to remove.
///
/// \param publicIds An array of Public IDs of images uploaded to Cloudinary.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDTagRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDTagRequest * _Nonnull)removeTag:(NSString * _Nonnull)tag publicIds:(NSArray<NSString *> * _Nonnull)publicIds params:(CLDTagsRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDTagResult * _Nullable, NSError * _Nullable))completionHandler;
/// Replaces a tag to one or more assets in your cloud.
/// Tags are used to categorize and organize your images, and can also be used to apply group actions to images,
/// for example to delete images, create sprites, ZIP files, JSON lists, or animated GIFs.
/// Each image can be assigned one or more tags, which is a short name that you can dynamically use (no need to predefine tags).
/// \param tag The tag to replace.
///
/// \param publicIds An array of Public IDs of images uploaded to Cloudinary.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDTagRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDTagRequest * _Nonnull)replaceTag:(NSString * _Nonnull)tag publicIds:(NSArray<NSString *> * _Nonnull)publicIds params:(CLDTagsRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDTagResult * _Nullable, NSError * _Nullable))completionHandler;
/// The explicit method is used to apply actions to already uploaded images, i.e., to update images that have already been uploaded.
/// The most common usage of this method is to generate transformations for images that have already been uploaded,
/// either so that they do not need to be generated on the fly when first accessed by users,
/// or because Strict Transformations are enabled for your account and you cannot create transformed images on the fly (for more information, see <a href="http://cloudinary.com/documentation/upload_images#control_access_to_images">Access control to images</a>).
/// \param publicId The identifier of the uploaded asset.
///
/// \param type The specific type of the resource.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDExplicitRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDExplicitRequest * _Nonnull)explicitPublicId:(NSString * _Nonnull)publicId stringType:(NSString * _Nonnull)type params:(CLDExplicitRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDExplicitResult * _Nullable, NSError * _Nullable))completionHandler;
/// The explicit method is used to apply actions to already uploaded images, i.e., to update images that have already been uploaded.
/// The most common usage of this method is to generate transformations for images that have already been uploaded,
/// either so that they do not need to be generated on the fly when first accessed by users,
/// or because Strict Transformations are enabled for your account and you cannot create transformed images on the fly (for more information, see <a href="http://cloudinary.com/documentation/upload_images#control_access_to_images">Access control to images</a>).
/// \param publicId The identifier of the uploaded asset.
///
/// \param type The specific type of the resource.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDExplicitRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDExplicitRequest * _Nonnull)explicit:(NSString * _Nonnull)publicId type:(enum CLDType)type params:(CLDExplicitRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDExplicitResult * _Nullable, NSError * _Nullable))completionHandler;
/// The explode method creates derived images for all the individual pages in a PDF file.
/// Each derived image created is stored with the same Public ID as the PDF file,
/// and can be accessed using the page parameter for delivering an image of a specific PDF page.
/// This method is useful for pregenerating all the pages of the PDF as individual images so that they do not need to be generated on the fly when first accessed by your users.
/// \param publicId The identifier of the uploaded asset.
///
/// \param transformation A transformation to run on all the pages before storing them as derived images. This parameter is given as an array (using the SDKs) or comma-separated list          (for direct API calls) of transformations, and separated with a slash for chained transformations.
/// At minimum, you must pass the page transformation with the value all. If you supply additional transformations, you must deliver the image using the same relative order of the page and the other transformations. If you use a different order when you deliver, then it is considered a different transformation, and will be generated on-the-fly as a new derived image.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDExplodeRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDExplodeRequest * _Nonnull)explode:(NSString * _Nonnull)publicId transformation:(CLDTransformation * _Nonnull)transformation params:(CLDExplodeRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDExplodeResult * _Nullable, NSError * _Nullable))completionHandler;
/// Generate sprites by merging multiple images into a single large image for reducing network overhead and bypassing download limitations.
/// This method creates a sprite from all images that have been assigned a specified tag.
/// \param tag The sprite is created from all images with this tag.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDSpriteRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDSpriteRequest * _Nonnull)generateSprite:(NSString * _Nonnull)tag params:(CLDSpriteRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDSpriteResult * _Nullable, NSError * _Nullable))completionHandler;
/// Create a single animated GIF file from all images that have been assigned a specified tag,
/// where each image is included as a single frame of the resulting animating GIF (sorted alphabetically by their Public ID).
/// For a detailed explanation on generating animated GIFs, see the <a href="http://cloudinary.com/documentation/image_transformations#creating_animated_gifs">documentation on creating animated GIFs.</a>
/// \param tag The sprite is created from all images with this tag.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDMultiRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDMultiRequest * _Nonnull)multi:(NSString * _Nonnull)tag params:(CLDMultiRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDMultiResult * _Nullable, NSError * _Nullable))completionHandler;
/// Dynamically generate an image from a given textual string.
/// You can then use this textual image as any other image,
/// for example, as an overlay for other images. Various font,
/// color and style parameters can be specified to customize the look & feel of the text before converting it to an image.
/// \param text The text string to generate an image for.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDTextRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDTextRequest * _Nonnull)text:(NSString * _Nonnull)text params:(CLDTextRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDTextResult * _Nullable, NSError * _Nullable))completionHandler;
/// The Cloudinary library supports using a delete token to delete images on the client-side for a limited time of 10 minutes after being uploaded.
/// After 10 minutes has passed, the image cannot be deleted from the client side, only via the Destroy method.
/// In order to also receive a deletion token in the upload response, add the return_delete_token parameter to the upload method and set it to true.
/// \param token The delete token received in the upload response, after uploading the asset using <code>return_delete_token</code> set to true.
///
/// \param params An object holding the available parameters for the request.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance of <code>CLDDeleteRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDDeleteRequest * _Nonnull)deleteByToken:(NSString * _Nonnull)token params:(CLDDeleteByTokenRequestParams * _Nullable)params completionHandler:(void (^ _Nullable)(CLDDeleteResult * _Nullable, NSError * _Nullable))completionHandler;
@end

typedef SWIFT_ENUM(NSInteger, CLDModeration) {
  CLDModerationManual = 0,
  CLDModerationWebpurify = 1,
};


/// The <code>CLDMultiRequest</code> object is returned when creating a multi request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary15CLDMultiRequest")
@interface CLDMultiRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDMultiRequest.
- (CLDMultiRequest * _Nonnull)response:(void (^ _Nullable)(CLDMultiResult * _Nullable, NSError * _Nullable))completionHandler;
@end


/// This class represents the different parameters that can be passed when performing a request to generate a multi-image.
SWIFT_CLASS("_TtC10Cloudinary21CLDMultiRequestParams")
@interface CLDMultiRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDMultiRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDMultiRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Set a transformation to run on all the individual images before creating the sprite.
/// \param transformation The transformation to run.
///
///
/// returns:
/// A new instance of CLDMultiRequestParams.
- (nonnull instancetype)setTransformation:(CLDTransformation * _Nonnull)transformation;
/// Set a format to convert the images before storing them in your Cloudinary account. default is jpg.
/// \param format The format to convert to.
///
///
/// returns:
/// A new instance of CLDMultiRequestParams.
- (nonnull instancetype)setFormat:(NSString * _Nonnull)format;
/// Set a boolean parameter indicating whether to perform the image generation in the background (asynchronously). default is false.
/// \param async The boolean parameter.
///
///
/// returns:
/// A new instance of CLDMultiRequestParams.
- (nonnull instancetype)setAsync:(BOOL)async;
/// Set an HTTP or HTTPS URL to notify your application (a webhook) when the process has completed.
/// \param notificationUrl The URL.
///
///
/// returns:
/// A new instance of CLDMultiRequestParams.
- (nonnull instancetype)setNotificationUrl:(NSString * _Nonnull)notificationUrl;
@end


SWIFT_CLASS("_TtC10Cloudinary14CLDMultiResult")
@interface CLDMultiResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable secureUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable publicId;
@property (nonatomic, readonly, copy) NSString * _Nullable version;
@end


/// A protocol defining the way the SDK works with its network layer, allowing the implementation of a custom network layer.
/// By default the Cloudinary SDK uses CLDNetworkDelegate() as its network adapter,
/// to use a custom network adapter you must implement the <code>CLDNetworkAdapter</code> protocol and send it when creating the CLDCloudinary instance.
SWIFT_PROTOCOL("_TtP10Cloudinary17CLDNetworkAdapter_")
@protocol CLDNetworkAdapter
/// Create a network request for the given URL, with the specified headers and body parameters.
/// \param url The URL to make the request to.
///
/// \param headers A dictionary of the headers to set to the request.
///
/// \param parameters A dictionary of the parameters to set to the request.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (id <CLDNetworkDataRequest> _Nonnull)cloudinaryRequest:(NSString * _Nonnull)url headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Create a network upload request for the given URL, with the specified headers, body parameters and data.
/// \param url The URL to make the request to.
///
/// \param headers A dictionary of the headers to set to the request.
///
/// \param parameters A dictionary of the parameters to set to the request.
///
/// \param data Can receive eithe the data to upload or an NSURL to either a local or a remote file to upload.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add a progress closure that is called periodically during the upload
/// and a response closure to be called once the upload is finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (id <CLDNetworkDataRequest> _Nonnull)uploadToCloudinary:(NSString * _Nonnull)url headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers parameters:(NSDictionary<NSString *, id> * _Nonnull)parameters data:(id _Nonnull)data SWIFT_WARN_UNUSED_RESULT;
/// Download a file from the specified url.
/// \param url The URL of the file to download.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDFetchImageRequest</code>,
/// allowing the option to set a closure returning the fetched image when its available.
/// The protocol also allows the options to add a progress closure that is called periodically during the download,
/// as well as cancelling the request.
- (id <CLDFetchImageRequest> _Nonnull)downloadFromCloudinary:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Set a completion handler provided by the UIApplicationDelegate <code>application:handleEventsForBackgroundURLSession:completionHandler:</code> method.
/// The handler will be called automaticaly once the session finishes its events for background URL session.
/// default is <code>nil</code>.
- (void)setBackgroundCompletionHandler:(void (^ _Nullable)(void))newValue;
/// The maximum number of queued downloads that can execute at the same time.
/// The default value of this property is NSOperationQueueDefaultMaxConcurrentOperationCount.
- (void)setMaxConcurrentDownloads:(NSInteger)maxConcurrentDownloads;
/// Get the completion handler to be called automaticaly once the session finishes its events for background URL session.
/// default is <code>nil</code>.
- (void (^ _Nullable)(void))getBackgroundCompletionHandler SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC10Cloudinary14CLDPredominant")
@interface CLDPredominant : CLDBaseResult
@property (nonatomic, readonly, strong) id _Nullable google;
@end


SWIFT_CLASS("_TtC10Cloudinary18CLDRekognitionFace")
@interface CLDRekognitionFace : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable status;
@property (nonatomic, readonly, copy) NSArray<CLDFace *> * _Nullable faces;
@end

@class CLDRenameResult;

/// The <code>CLDRenameRequest</code> object is returned when creating a rename request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary16CLDRenameRequest")
@interface CLDRenameRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDRenameRequest.
- (CLDRenameRequest * _Nonnull)response:(void (^ _Nullable)(CLDRenameResult * _Nullable, NSError * _Nullable))completionHandler;
@end


/// This class represents the different parameters that can be passed when performing a rename request.
SWIFT_CLASS("_TtC10Cloudinary22CLDRenameRequestParams")
@interface CLDRenameRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDRenameRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDRenameRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC10Cloudinary15CLDRenameResult")
@interface CLDRenameResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable publicId;
@property (nonatomic, readonly, copy) NSString * _Nullable format;
@property (nonatomic, readonly, copy) NSString * _Nullable version;
@property (nonatomic, readonly, copy) NSString * _Nullable resourceType;
@property (nonatomic, readonly, copy) NSString * _Nullable type;
@property (nonatomic, readonly, copy) NSString * _Nullable createdAt;
@property (nonatomic, readonly, copy) NSString * _Nullable url;
@property (nonatomic, readonly, copy) NSString * _Nullable secureUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable nextCursor;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable exif;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable metadata;
@property (nonatomic, readonly, strong) id _Nullable faces;
@property (nonatomic, readonly, strong) id _Nullable colors;
@property (nonatomic, readonly, strong) CLDDerived * _Nullable derived;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable tags;
@property (nonatomic, readonly, strong) id _Nullable moderation;
@property (nonatomic, readonly, strong) id _Nullable context;
@property (nonatomic, readonly, copy) NSString * _Nullable phash;
@property (nonatomic, readonly, strong) CLDPredominant * _Nullable predominant;
@property (nonatomic, readonly, strong) CLDCoordinates * _Nullable coordinates;
@property (nonatomic, readonly, strong) CLDInfo * _Nullable info;
@end




/// The CLDResponsiveBreakpoints class describe the settings available for configuring responsive breakpoints.
/// Responsive breakpoints is used to request Cloudinary to automatically find the best breakpoints.
SWIFT_CLASS("_TtC10Cloudinary24CLDResponsiveBreakpoints")
@interface CLDResponsiveBreakpoints : NSObject
/// Initializes a CLDResponsiveBreakpoints instance.
/// \param createDerived If true, create and keep the derived assets of the selected breakpoints during the API call.
/// If false, assets generated during the analysis process are thrown away.
///
///
/// returns:
/// A new CLDResponsiveBreakpoints instance.
- (nonnull instancetype)initWithCreateDerived:(BOOL)createDerived OBJC_DESIGNATED_INITIALIZER;
/// Set the base transformation to first apply to the image before finding the best breakpoints.
/// \param transformation The transformation to apply.
///
///
/// returns:
/// The same CLDResponsiveBreakpoints instance.
- (nonnull instancetype)setTransformations:(CLDTransformation * _Nonnull)transformation SWIFT_WARN_UNUSED_RESULT;
/// Set the maximum width needed for this asset.
/// If specifying a width bigger than the original asset, the width of the original asset is used instead. default is 1000.
/// \param maxWidth The max width to set.
///
///
/// returns:
/// The same CLDResponsiveBreakpoints instance.
- (nonnull instancetype)setMaxWidth:(NSInteger)maxWidth SWIFT_WARN_UNUSED_RESULT;
/// Set the minimum width needed for this asset. default is 50.
/// \param minWidth The min width to set.
///
///
/// returns:
/// The same CLDResponsiveBreakpoints instance.
- (nonnull instancetype)setMinWidth:(NSInteger)minWidth SWIFT_WARN_UNUSED_RESULT;
/// Set the minimum number of bytes between two consecutive breakpoints (assets). default is 20000.
/// \param bytesStep The bytes step to set.
///
///
/// returns:
/// The same CLDResponsiveBreakpoints instance.
- (nonnull instancetype)setBytesStep:(NSInteger)bytesStep SWIFT_WARN_UNUSED_RESULT;
/// Set the maximum number of breakpoints to find, between 3 and 200.
/// This means that there might be size differences bigger than the given bytes_step value between consecutive assets. default is 20.
/// \param maxImages The max images to set.
///
///
/// returns:
/// The same CLDResponsiveBreakpoints instance.
- (nonnull instancetype)setMaxImages:(NSInteger)maxImages SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)setParam:(NSString * _Nonnull)key value:(id _Nullable)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class NSNumber;

/// The CLDSignature class represents a signature used to sign a URL request.
SWIFT_CLASS("_TtC10Cloudinary12CLDSignature")
@interface CLDSignature : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull signature;
@property (nonatomic, readonly, strong) NSNumber * _Nonnull timestamp;
- (nonnull instancetype)initWithSignature:(NSString * _Nonnull)signature timestamp:(NSNumber * _Nonnull)timestamp OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// The <code>CLDSpriteRequest</code> object is returned when creating a sprite request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary16CLDSpriteRequest")
@interface CLDSpriteRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDSpriteRequest.
- (CLDSpriteRequest * _Nonnull)response:(void (^ _Nullable)(CLDSpriteResult * _Nullable, NSError * _Nullable))completionHandler;
@end


/// This class represents the different parameters that can be passed when performing a request to generate a sprite.
SWIFT_CLASS("_TtC10Cloudinary22CLDSpriteRequestParams")
@interface CLDSpriteRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDSpriteRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDSpriteRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Set a transformation to run on all the individual images before creating the sprite.
/// \param transformation The transformation to run.
///
///
/// returns:
/// A new instance of CLDSpriteRequestParams.
- (nonnull instancetype)setTransformation:(CLDTransformation * _Nonnull)transformation;
/// Set a format to convert the images before storing them in your Cloudinary account. default is jpg.
/// \param format The format to convert to.
///
///
/// returns:
/// A new instance of CLDSpriteRequestParams.
- (nonnull instancetype)setFormat:(NSString * _Nonnull)format;
/// Set a boolean parameter indicating whether to perform the image generation in the background (asynchronously). default is false.
/// \param async The boolean parameter.
///
///
/// returns:
/// A new instance of CLDSpriteRequestParams.
- (nonnull instancetype)setAsync:(BOOL)async;
/// Set an HTTP or HTTPS URL to notify your application (a webhook) when the process has completed.
/// \param notificationUrl The URL.
///
///
/// returns:
/// A new instance of CLDSpriteRequestParams.
- (nonnull instancetype)setNotificationUrl:(NSString * _Nonnull)notificationUrl;
@end


SWIFT_CLASS("_TtC10Cloudinary15CLDSpriteResult")
@interface CLDSpriteResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable cssUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable secureCssUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable imageUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable jsonUrl;
@property (nonatomic, readonly, copy) NSString * _Nullable publicId;
@property (nonatomic, readonly, copy) NSString * _Nullable version;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, CLDImageInfo *> * _Nullable imageInfos;
@end


SWIFT_CLASS("_TtC10Cloudinary12CLDTextLayer")
@interface CLDTextLayer : CLDLayer
/// Initialize a CLDTextLayer instance.
/// -returns: The new CLDTextLayer instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add a text caption layer.
/// \param text The text to use as a caption layer.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setTextWithText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
/// Set the name of a font family. e.g. <code>arial</code>.
/// \param fontFamily The layer font family.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontFamilyWithFontFamily:(NSString * _Nonnull)fontFamily SWIFT_WARN_UNUSED_RESULT;
/// Set the font size in pixels. e.g. 12.
/// \param fontSize The layer font size.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontSizeFromInt:(NSInteger)fontSize SWIFT_WARN_UNUSED_RESULT;
/// Set the font size in pixels. e.g. 12.
/// \param fontSize The layer font size.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontSizeFromString:(NSString * _Nonnull)fontSize SWIFT_WARN_UNUSED_RESULT;
/// Set the font style.
/// \param fontStyle The layer font style.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontStyleFromLayerFontStyle:(enum CLDFontStyle)fontStyle SWIFT_WARN_UNUSED_RESULT;
/// Set the font style. Possible values: normal (default value) or italic. e.g., italic
/// \param fontStyle The layer font style.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontStyleFromString:(NSString * _Nonnull)fontStyle SWIFT_WARN_UNUSED_RESULT;
/// Set the text weight.
/// \param fontWeight The layer font weight.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontWeightFromLayerFontWeight:(enum CLDFontWeight)fontWeight SWIFT_WARN_UNUSED_RESULT;
/// Set the text weight. Possible values: normal (default value) or bold.
/// \param fontWeight The layer font weight.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setFontWeightFromString:(NSString * _Nonnull)fontWeight SWIFT_WARN_UNUSED_RESULT;
/// Set the text decoration. Possible values: none (default value), underline or strikethrough.
/// \param textDecoration The layer text Decoration.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setTextDecorationString:(NSString * _Nonnull)textDecoration SWIFT_WARN_UNUSED_RESULT;
/// Set the text alignment. Possible values: left (default value), center, right, end, start or justify.
/// \param textAlign The layer text alignment.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setTextAlignString:(NSString * _Nonnull)textAlign SWIFT_WARN_UNUSED_RESULT;
/// Set the font stroke (border).
/// Possible values: none (default value) or stroke.
/// Set the color and weight of the stroke with the border parameter.
/// \param stroke The layer text stroke.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setStrokeString:(NSString * _Nonnull)stroke SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the letters in pixels. Can be a positive or negative.
/// \param letterSpacing The layer letter Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLetterSpacingFromInt:(NSInteger)letterSpacing SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the letters in pixels. Can be a positive or negative.
/// \param letterSpacing The layer letter Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLetterSpacingFromFloat:(float)letterSpacing SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the letters in pixels. Can be a positive or negative.
/// \param letterSpacing The layer letter Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLetterSpacingString:(NSString * _Nonnull)letterSpacing SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the lines in pixels (only relevant for multi-line text). Can be a positive or negative.
/// \param lineSpacing The layer line Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLineSpacingFromInt:(NSInteger)lineSpacing SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the lines in pixels (only relevant for multi-line text). Can be a positive or negative.
/// \param lineSpacing The layer line Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLineSpacingFromFloat:(float)lineSpacing SWIFT_WARN_UNUSED_RESULT;
/// Set the spacing between the lines in pixels (only relevant for multi-line text). Can be a positive or negative.
/// \param lineSpacing The layer line Spacing.
///
///
/// returns:
/// The same instance of CLDTextLayer.
- (CLDTextLayer * _Nonnull)setLineSpacingString:(NSString * _Nonnull)lineSpacing SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC10Cloudinary17CLDSubtitlesLayer")
@interface CLDSubtitlesLayer : CLDTextLayer
/// Initialize a CLDLayer instance.
/// -returns: The new CLDLayer instance.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The <code>CLDTagRequest</code> object is returned when creating a tag request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary13CLDTagRequest")
@interface CLDTagRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDTagRequest.
- (CLDTagRequest * _Nonnull)response:(void (^ _Nullable)(CLDTagResult * _Nullable, NSError * _Nullable))completionHandler;
@end


SWIFT_CLASS("_TtC10Cloudinary12CLDTagResult")
@interface CLDTagResult : CLDBaseResult
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable publicIds;
@end


/// This class represents the different parameters that can be passed when performing a tag request.
SWIFT_CLASS("_TtC10Cloudinary20CLDTagsRequestParams")
@interface CLDTagsRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDTagsRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDTagsRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, CLDTextDecoration) {
  CLDTextDecorationNone = 0,
  CLDTextDecorationUnderline = 1,
};



/// The <code>CLDTagRequest</code> object is returned when creating a tag request.
/// It allows the options to add a response closure to be called once the request has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary14CLDTextRequest")
@interface CLDTextRequest : CLDRequest
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDTextRequest.
- (CLDTextRequest * _Nonnull)response:(void (^ _Nullable)(CLDTextResult * _Nullable, NSError * _Nullable))completionHandler;
@end


/// This class represents the different parameters that can be passed when performing a request to generate a text-image.
SWIFT_CLASS("_TtC10Cloudinary20CLDTextRequestParams")
@interface CLDTextRequestParams : CLDRequestParams
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes a CLDTextRequestParams instance.
/// \param params A dictionary of the request parameters.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (nonnull instancetype)initWithParams:(NSDictionary<NSString *, id> * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
/// Set an identifier that is used for accessing the generated image.
/// If not specified, a unique identifier is generated by Cloudinary.
/// \param text The identifier.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setPublicId:(NSString * _Nonnull)publicId;
/// Set a font family.
/// \param fontFamily The name of the font family.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontFamily:(NSString * _Nonnull)fontFamily;
/// Set the font size in points.
/// \param fontSize The font size in points. default is 12.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontSizeFromInt:(NSInteger)fontSize;
/// Set the font size in points.
/// \param fontSize The font size in points. default is 12.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontSize:(NSString * _Nonnull)fontSize;
/// Set the font size in points.
/// \param fontColor A name or RGB representation of the font’s color. For example: <code>red</code> or #ff0000. default is black.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontColor:(NSString * _Nonnull)fontColor;
/// Set the font weight.
/// \param fontWeight The font weight to set. default is normal.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontWeightFromFontWeight:(enum CLDFontWeight)fontWeight;
/// Set the font weight.
/// \param fontWeight The font weight to set. default is normal.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontWeight:(NSString * _Nonnull)fontWeight;
/// Set the font style.
/// \param fontStyle The font style to set. default is normal.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontStyleFromFontStyle:(enum CLDFontStyle)fontStyle;
/// Set the font style.
/// \param fontStyle The font style to set. default is normal.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setFontStyle:(NSString * _Nonnull)fontStyle;
/// Set the background color.
/// \param background A name or RGB representation of the background color. For example: <code>red</code> or #ff0000. default is transparent.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setBackground:(NSString * _Nonnull)background;
/// Set the text opacity level from 0 to 100.
/// \param opacity The text opacity value between 0 (invisible) and 100. default is 100.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setOpacity:(NSInteger)opacity;
/// Set a text decoration to add the the generated text, for example: underline.
/// \param textDecoration The text decoration to set. default is none.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setTextDecorationFromTextDecoration:(enum CLDTextDecoration)textDecoration;
/// Set a text decoration to add the the generated text, for example: underline.
/// \param textDecoration The text decoration to set. default is none.
///
///
/// returns:
/// A new instance of CLDTextRequestParams.
- (CLDTextRequestParams * _Nonnull)setTextDecoration:(NSString * _Nonnull)textDecoration;
@end


SWIFT_CLASS("_TtC10Cloudinary13CLDTextResult")
@interface CLDTextResult : CLDBaseResult
@end

enum CLDCrop : NSInteger;
enum CLDEffect : NSInteger;
enum CLDGravity : NSInteger;

/// The CLDTransformation class represents a full transformation performed by Cloudinay on-the-fly on a certain asset.
SWIFT_CLASS("_TtC10Cloudinary17CLDTransformation")
@interface CLDTransformation : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nullable width;
@property (nonatomic, readonly, copy) NSString * _Nullable height;
@property (nonatomic, readonly, copy) NSString * _Nullable named;
@property (nonatomic, readonly, copy) NSString * _Nullable crop;
@property (nonatomic, readonly, copy) NSString * _Nullable background;
@property (nonatomic, readonly, copy) NSString * _Nullable color;
@property (nonatomic, readonly, copy) NSString * _Nullable effect;
@property (nonatomic, readonly, copy) NSString * _Nullable angle;
@property (nonatomic, readonly, copy) NSString * _Nullable opacity;
@property (nonatomic, readonly, copy) NSString * _Nullable border;
@property (nonatomic, readonly, copy) NSString * _Nullable x;
@property (nonatomic, readonly, copy) NSString * _Nullable y;
@property (nonatomic, readonly, copy) NSString * _Nullable radius;
@property (nonatomic, readonly, copy) NSString * _Nullable quality;
@property (nonatomic, readonly, copy) NSString * _Nullable defaultImage;
@property (nonatomic, readonly, copy) NSString * _Nullable gravity;
@property (nonatomic, readonly, copy) NSString * _Nullable colorSpace;
@property (nonatomic, readonly, copy) NSString * _Nullable prefix;
@property (nonatomic, readonly, copy) NSString * _Nullable overlay;
@property (nonatomic, readonly, copy) NSString * _Nullable underlay;
@property (nonatomic, readonly, copy) NSString * _Nullable fetchFormat;
@property (nonatomic, readonly, copy) NSString * _Nullable density;
@property (nonatomic, readonly, copy) NSString * _Nullable page;
@property (nonatomic, readonly, copy) NSString * _Nullable delay;
@property (nonatomic, readonly, copy) NSString * _Nullable rawTransformation;
@property (nonatomic, readonly, copy) NSString * _Nullable flags;
@property (nonatomic, readonly, copy) NSString * _Nullable dpr;
@property (nonatomic, readonly, copy) NSString * _Nullable zoom;
@property (nonatomic, readonly, copy) NSString * _Nullable aspectRatio;
@property (nonatomic, readonly, copy) NSString * _Nullable audioCodec;
@property (nonatomic, readonly, copy) NSString * _Nullable audioFrequency;
@property (nonatomic, readonly, copy) NSString * _Nullable bitRate;
@property (nonatomic, readonly, copy) NSString * _Nullable videoSampling;
@property (nonatomic, readonly, copy) NSString * _Nullable duration;
@property (nonatomic, readonly, copy) NSString * _Nullable startOffset;
@property (nonatomic, readonly, copy) NSString * _Nullable endOffset;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable offset;
@property (nonatomic, readonly, copy) NSString * _Nullable videoCodec;
- (NSString * _Nullable)getParam:(NSString * _Nonnull)param SWIFT_WARN_UNUSED_RESULT;
/// Set the image width.
/// \param width The width to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setWidthWithInt:(NSInteger)width;
/// Set the image width.
/// \param width The width to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setWidthWithFloat:(float)width;
/// Set the image width.
/// \param width The width to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setWidth:(NSString * _Nonnull)width;
/// Set the image height.
/// \param height The height to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setHeightWithInt:(NSInteger)height;
/// Set the image height.
/// \param height The height to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setHeightWithFloat:(float)height;
/// Set the image height.
/// \param height The height to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setHeight:(NSString * _Nonnull)height;
/// A named transformation is a set of image transformations that has been given a custom name for easy reference.
/// It is useful to define a named transformation when you have a set of relatively complex transformations that you use often and that you want to easily reference.
/// \param names The names of the transformations to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setNamedWithArray:(NSArray<NSString *> * _Nonnull)names;
/// A named transformation is a set of image transformations that has been given a custom name for easy reference.
/// It is useful to define a named transformation when you have a set of relatively complex transformations that you use often and that you want to easily reference.
/// \param names The names of the transformations to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setNamed:(NSString * _Nonnull)names;
/// Set the image crop.
/// \param crop The crop to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setCropWithCrop:(enum CLDCrop)crop;
/// Set the image crop.
/// \param crop The crop to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setCrop:(NSString * _Nonnull)crop;
/// Defines the background color to use instead of transparent background areas when converting to JPG format or using the pad crop mode.
/// The background color can be set as an RGB hex triplet (e.g. ‘#3e2222’), a 3 character RGB hex (e.g. ‘#777’) or a named color (e.g. ‘green’).
/// \param background The background color to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setBackground:(NSString * _Nonnull)background;
/// Customize the color to use together with: text captions, the shadow effect and the colorize effect.
/// The color can be set as an RGB hex triplet (e.g. ‘#3e2222’), a 3 character RGB hex (e.g. ‘#777’) or a named color (e.g. ‘green’).
/// \param color The color to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setColor:(NSString * _Nonnull)color;
/// Apply a filter or an effect on an image.
/// \param effect The effect to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setEffectWithEffect:(enum CLDEffect)effect;
/// Apply a filter or an effect on an image.
/// The value includes the name of the effect and an additional parameter that controls the behavior of the specific effect.
/// \param effect The effect to apply.
///
/// \param effectParam The effect value to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setEffectWithEffect:(enum CLDEffect)effect param:(NSString * _Nonnull)param;
/// Apply a filter or an effect on an image.
/// The value includes the name of the effect and an additional parameter that controls the behavior of the specific effect.
/// \param effect The effect to apply.
///
/// \param effectParam The effect value to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setEffect:(NSString * _Nonnull)effect param:(NSString * _Nonnull)param;
/// Apply a filter or an effect on an image.
/// \param effect The effect to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setEffect:(NSString * _Nonnull)effect;
/// Rotate or flip an image by the given degrees or automatically according to its orientation or available meta-data.
/// \param angle The angle to rotate.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setAngleWithInt:(NSInteger)angle;
/// Rotate or flip an image by the given degrees or automatically according to its orientation or available meta-data.
/// \param angles The angles to rotate.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setAngleWithArray:(NSArray<NSString *> * _Nonnull)angles;
/// Rotate or flip an image by the given degrees or automatically according to its orientation or available meta-data.
/// \param angle The angle to rotate.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setAngle:(NSString * _Nonnull)angles;
/// Adjust the opacity of the image and make it semi-transparent. 100 means opaque, while 0 is completely transparent.
/// \param opacity The opacity level to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setOpacityWithInt:(NSInteger)opacity;
/// Adjust the opacity of the image and make it semi-transparent. 100 means opaque, while 0 is completely transparent.
/// \param opacity The opacity level to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setOpacity:(NSString * _Nonnull)opacity;
/// Add a solid border around the image.
/// \param width The border width.
///
/// \param color The border color.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setBorder:(NSInteger)width color:(NSString * _Nonnull)color;
/// Add a solid border around the image.
/// Should conform to the form: [width]px_solid_[color], e.g - 5px_solid_#111111 or 5px_solid_red
/// \param border The border to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setBorder:(NSString * _Nonnull)border;
/// Horizontal position for custom-coordinates based cropping, overlay placement and certain region related effects.
/// \param x The x position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setXFromInt:(NSInteger)x;
/// Horizontal position for custom-coordinates based cropping, overlay placement and certain region related effects.
/// \param x The x position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setXFromFloat:(float)x;
/// Horizontal position for custom-coordinates based cropping, overlay placement and certain region related effects.
/// \param x The x position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setX:(NSString * _Nonnull)x;
/// Vertical position for custom-coordinates based cropping and overlay placement.
/// \param y The y position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setYFromInt:(NSInteger)y;
/// Vertical position for custom-coordinates based cropping and overlay placement.
/// \param y The y position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setYFromFloat:(float)y;
/// Vertical position for custom-coordinates based cropping and overlay placement.
/// \param y The y position to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setY:(NSString * _Nonnull)y;
/// Round the corners of an image or make it completely circular or oval (ellipse).
/// \param radius The radius to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setRadiusFromInt:(NSInteger)radius;
/// Round the corners of an image or make it completely circular or oval (ellipse).
/// \param radius The radius to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setRadius:(NSString * _Nonnull)radius;
/// Control the JPEG, WebP, GIF, JPEG XR and JPEG 2000 compression quality. 1 is the lowest quality and 100 is the highest. Reducing quality generates JPG images much smaller in file size. The default values are:
/// <ul>
///   <li>
///     JPEG: 90
///   </li>
///   <li>
///     WebP: 80 (100 quality for WebP is lossless)
///   </li>
///   <li>
///     GIF: lossless by default. 80 if the <code>lossy</code> flag is added
///   </li>
///   <li>
///     JPEG XR and JPEG 2000: 70
///   </li>
/// </ul>
/// \param quality The quality to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setQualityFromInt:(NSInteger)quality;
/// Control the JPEG, WebP, GIF, JPEG XR and JPEG 2000 compression quality. 1 is the lowest quality and 100 is the highest. Reducing quality generates JPG images much smaller in file size. The default values are:
/// <ul>
///   <li>
///     JPEG: 90
///   </li>
///   <li>
///     WebP: 80 (100 quality for WebP is lossless)
///   </li>
///   <li>
///     GIF: lossless by default. 80 if the <code>lossy</code> flag is added
///   </li>
///   <li>
///     JPEG XR and JPEG 2000: 70
///   </li>
/// </ul>
/// \param quality The quality to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setQuality:(NSString * _Nonnull)quality;
/// Specify the public ID of a placeholder image to use if the requested image or social network picture does not exist.
/// \param defaultImage The identifier of the default image.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setDefaultImage:(NSString * _Nonnull)defaultImage;
/// Decides which part of the image to keep while ‘crop’, ‘pad’ and ‘fill’ crop modes are used.
/// \param gravity The gravity to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setGravityWithGravity:(enum CLDGravity)gravity;
/// Decides which part of the image to keep while ‘crop’, ‘pad’ and ‘fill’ crop modes are used.
/// \param gravity The gravity to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setGravity:(NSString * _Nonnull)gravity;
/// Set the transformation color space.
/// \param colorSpace The color space to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setColorSpace:(NSString * _Nonnull)colorSpace;
/// Set the transformation prefix.
/// \param prefix The prefix to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setPrefix:(NSString * _Nonnull)prefix;
/// Add an overlay over the base image. You can control the dimension and position of the overlay using the width, height, x, y and gravity parameters.
/// The overlay can take one of the following forms:
/// identifier can be a public ID of an uploaded image or a specific image kind, public ID and settings.
/// <em>You can use the convenience method <code>addOverlayWithLayer</code></em>
/// \param overlay The overlay to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setOverlay:(NSString * _Nonnull)overlay;
/// Add an underlay image below a base partially-transparent image.
/// You can control the dimensions and position of the underlay using the width, height, x, y and gravity parameters.
/// The identifier can be a public ID of an uploaded image or a specific image kind, public ID and settings.
/// The underlay parameter shares the same features as the overlay parameter.
/// <em>You can use the convenience method <code>addUnderlayWithLayer</code></em>
/// \param underlay The underlay to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setUnderlay:(NSString * _Nonnull)underlay;
/// Force format conversion to the given image format for remote ‘fetch’ URLs and auto uploaded images that already have a different format as part of their URLs.
/// \param fetchFormat The fetchFormat to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setFetchFormat:(NSString * _Nonnull)fetchFormat;
/// Control the density to use while converting a PDF document to images. (range: 50-300, default is 150)
/// \param density The density to use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setDensityWithInt:(NSInteger)density;
/// Control the density to use while converting a PDF document to images. (range: 50-300, default is 150)
/// \param density The density to use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setDensity:(NSString * _Nonnull)density;
/// Given a multi-page file (PDF, animated GIF, TIFF), generate an image of a single page using the given index.
/// \param page The index of the page to use to use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setPageWithInt:(NSInteger)page;
/// Given a multi-page file (PDF, animated GIF, TIFF), generate an image of a single page using the given index.
/// \param page The index of the page to use to use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setPage:(NSString * _Nonnull)page;
/// Controls the time delay between the frames of an animated image, in milliseconds.
/// \param delay The delay between the frames of an animated image, in milliseconds.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setDelayWithInt:(NSInteger)delay;
/// Controls the time delay between the frames of an animated image, in milliseconds.
/// \param delay The delay between the frames of an animated image, in milliseconds.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setDelay:(NSString * _Nonnull)delay;
/// Add a raw transformation, it will be appended to the other transformation parameter.
/// the transformation must conform to <a href="http://cloudinary.com/documentation/image_transformation_reference">Cloudinary’s transformation documentation</a>
/// \param rawTransformation The raw transformation to add.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setRawTransformation:(NSString * _Nonnull)rawTransformation;
/// Set one or more flags that alter the default transformation behavior.
/// \param flags An array of the flags to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setFlagsWithArray:(NSArray<NSString *> * _Nonnull)flags;
/// Set one or more flags that alter the default transformation behavior.
/// \param flags An array of the flags to apply.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setFlags:(NSString * _Nonnull)flags;
/// Deliver the image in the specified device pixel ratio.
/// \param dpr The DPR ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setDprWithFloat:(float)dpr;
/// Deliver the image in the correct device pixel ratio, according to the used device.
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setDprAuto;
/// Deliver the image in the specified device pixel ratio. The parameter accepts any positive float value.
/// \param dpr The DPR ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setDpr:(NSString * _Nonnull)dpr;
/// Control how much of the original image surrounding the face to keep when using either the ‘crop’ or ‘thumb’ cropping modes with face detection. default is 1.0.
/// \param zoom The zoom ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setZoomWithFloat:(float)zoom;
/// Control how much of the original image surrounding the face to keep when using either the ‘crop’ or ‘thumb’ cropping modes with face detection. default is 1.0.
/// \param zoom The zoom ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setZoom:(NSString * _Nonnull)zoom;
/// Resize or crop the image to a new aspect ratio using a nominator and dominator (e.g. 16 and 9 for 16:9).
/// This parameter is used together with a specified crop mode that determines how the image is adjusted to the new dimensions.
/// \param nominator The nominator ot use.
///
/// \param dominator The dominator ot use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setAspectRatioWithNominator:(NSInteger)nominator denominator:(NSInteger)denominator;
/// Resize or crop the image to a new aspect ratio.
/// This parameter is used together with a specified crop mode that determines how the image is adjusted to the new dimensions.
/// \param aspectRatio The aspect ratio ot use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setAspectRatioWithFloat:(float)aspectRatio;
/// Resize or crop the image to a new aspect ratio.
/// This parameter is used together with a specified crop mode that determines how the image is adjusted to the new dimensions.
/// \param aspectRatio The aspect ratio ot use.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setAspectRatio:(NSString * _Nonnull)aspectRatio;
/// Use the audio_codec parameter to set the audio codec or remove the audio channel completely as follows:
/// <ul>
///   <li>
///     <em>none</em> removes the audio channel
///   </li>
///   <li>
///     <em>aac</em> (mp4 or flv only)
///   </li>
///   <li>
///     <em>vorbis</em> (ogv or webm only)
///   </li>
///   <li>
///     <em>mp3</em> (mp4 or flv only)
///   </li>
/// </ul>
/// \param audioCodec The audio codec ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setAudioCodec:(NSString * _Nonnull)audioCodec;
/// Use the audio_frequency parameter to control the audio sampling frequency.
/// This parameter represents an integer value in Hz.
/// See the documentation in the <a href="http://cloudinary.com/documentation/video_manipulation_and_delivery#video_transformations_reference">Video transformations reference table</a> for the possible values.
/// \param audioFrequency The audio frequency ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setAudioFrequencyWithInt:(NSInteger)audioFrequency;
/// Use the audio_frequency parameter to control the audio sampling frequency.
/// This parameter represents an integer value in Hz.
/// See the documentation in the <a href="http://cloudinary.com/documentation/video_manipulation_and_delivery#video_transformations_reference">Video transformations reference table</a> for the possible values.
/// \param audioFrequency The audio frequency ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setAudioFrequency:(NSString * _Nonnull)audioFrequency;
/// Use the bit_rate parameter for advanced control of the video bit rate.
/// This parameter controls the number of bits used to represent the video data.
/// The higher the bit rate, the higher the visual quality of the video, but the larger the file size as well.
/// \param bitRate The bit rate ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setBitRateWithInt:(NSInteger)bitRate;
/// Use the bit_rate parameter for advanced control of the video bit rate.
/// This parameter controls the number of bits used to represent the video data.
/// The higher the bit rate, the higher the visual quality of the video, but the larger the file size as well.
/// \param bitRate The bit rate ot set in kilobytes.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setBitRateWithKb:(NSInteger)bitRate;
/// Use the bit_rate parameter for advanced control of the video bit rate.
/// This parameter controls the number of bits used to represent the video data.
/// The higher the bit rate, the higher the visual quality of the video, but the larger the file size as well.
/// Bit rate can take one of the following values:
/// <ul>
///   <li>
///     An integer e.g. 120000.
///   </li>
///   <li>
///     A string supporting ‘k’ and ‘m’ (kilobits and megabits respectively) e.g. 500k or 2m.
///   </li>
/// </ul>
/// \param bitRate The bit rate ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setBitRate:(NSString * _Nonnull)bitRate;
/// The total number of frames to sample from the original video. The frames are spread out over the length of the video, e.g. 20 takes one frame every 5%.
/// \param frames The video sampling frames ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setVideoSamplingWithFrames:(NSInteger)frames;
/// Controls the time delay between the frames of an animated image, in milliseconds.
/// \param delay The delay ot set in milliseconds.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setVideoSamplingWithDelay:(float)delay;
/// Relevant for conversion of video to animated GIF or WebP.
/// If not specified, the resulting GIF or WebP samples the whole video (up to 400 frames, at up to 10 frames per second).
/// By default the duration of the animated image is the same as the duration of the video,
/// no matter how many frames are sampled from the original video (use the delay parameter to adjust the amount of time between frames).
/// \param videoSampling The video sampling ot set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setVideoSampling:(NSString * _Nonnull)videoSampling;
/// Offset in seconds or percent of a video, normally used together with the start_offset and end_offset parameters. Used to specify:
/// <ul>
///   <li>
///     The duration the video displays.
///   </li>
///   <li>
///     The duration an overlay displays.
///   </li>
/// </ul>
/// \param seconds The duration to set in seconds.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setDurationWithSeconds:(float)seconds;
/// Offset in seconds or percent of a video, normally used together with the start_offset and end_offset parameters. Used to specify:
/// <ul>
///   <li>
///     The duration the video displays.
///   </li>
///   <li>
///     The duration an overlay displays.
///   </li>
/// </ul>
/// \param percent The duration percent to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setDurationWithPercent:(NSInteger)percent;
/// Offset in seconds or percent of a video, normally used together with the start_offset and end_offset parameters. Used to specify:
/// <ul>
///   <li>
///     The duration the video displays.
///   </li>
///   <li>
///     The duration an overlay displays.
///   </li>
/// </ul>
/// \param duration The duration to set in seconds.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setDuration:(NSString * _Nonnull)duration;
/// Set an offset in seconds to cut a video at the start.
/// \param seconds The start time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setStartOffsetWithSeconds:(float)seconds;
/// Set an offset in percent to cut a video at the start.
/// \param percent The percent of time to cut.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setStartOffsetWithPercent:(NSInteger)percent;
/// Set an offset in seconds or percent of a video to cut a video at the start.
/// \param duration The start time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setStartOffset:(NSString * _Nonnull)duration;
/// Set an offset in seconds to cut a video at the end.
/// \param seconds The end time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setEndOffsetWithSeconds:(float)seconds;
/// Set an offset in percent to cut a video at the end.
/// \param percent The percent of time to cut.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setEndOffsetWithPercent:(NSInteger)percent;
/// Set an offset in seconds or percent of a video to cut a video at the end.
/// \param duration The end time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setEndOffset:(NSString * _Nonnull)duration;
/// Used to determine the video codec, video profile and level to use.
/// You can set this parameter to auto instead.
/// \param videoCodec The video codec to set.
///
/// \param videoProfile The video profile to set.
///
/// \param level The level to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setVideoCodecAndProfileAndLevel:(NSString * _Nonnull)videoCodec videoProfile:(NSString * _Nonnull)videoProfile level:(NSString * _Nullable)level;
/// Used to determine the video codec to use.
/// You can set this parameter to auto instead.
/// \param videoCodec The video codec to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setVideoCodec:(NSString * _Nonnull)videoCodec;
- (CLDTransformation * _Nonnull)setParam:(NSString * _Nonnull)key value:(NSString * _Nonnull)value;
/// Shortcut to set video cutting in seconds using a combination of start_offset and end_offset values.
/// \param startSeconds The start time to set.
///
/// \param endSeconds The end time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setStartOffsetAndEndOffsetWithStartSeconds:(float)startSeconds endSeconds:(float)endSeconds;
/// Shortcut to set video cutting in percent of video using a combination of start_offset and end_offset values.
/// \param startPercent The start time to set.
///
/// \param endPercent The end time to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setStartOffsetAndEndOffsetWithStartPercent:(NSInteger)startPercent endPercent:(NSInteger)endPercent;
/// Set an overlay using the helper class CLDLayer.
/// \param layer The layer to add as an overlay.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setOverlayWithLayer:(CLDLayer * _Nonnull)layer;
/// Set an underlay using the helper class CLDLayer.
/// \param layer The layer to add as an underlay.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setUnderlayWithLayer:(CLDLayer * _Nonnull)layer;
/// A convenience method to set the transformation X and Y parameters.
/// \param point The top left pont to set.
///
///
/// returns:
/// The same instance of CLDTransformation.
- (CLDTransformation * _Nonnull)setTopLeftPoint:(CGPoint)point;
/// Cloudinary supports powerful image transformations that are applied on the fly using dynamic URLs,
/// and you can also combine multiple transformations together as part of a single delivery request, e.g. crop an image and then add a border.
/// In certain cases you may want to perform additional transformations on the result of a single transformation request.
/// In order to do that, you can chain the transformations together.
/// In practice, the chain allows you to start seting properties to a new transformation,
/// which will be chained to the transformation you worked on, even though you still use the same CLDTransformation instance.
///
/// returns:
/// The same instance of CLDTransformation.
- (nonnull instancetype)chain;
@end

typedef SWIFT_ENUM(NSInteger, CLDCrop) {
  CLDCropFill = 0,
  CLDCropCrop = 1,
  CLDCropScale = 2,
  CLDCropFit = 3,
  CLDCropLimit = 4,
  CLDCropMFit = 5,
  CLDCropLFill = 6,
  CLDCropPad = 7,
  CLDCropLPad = 8,
  CLDCropMPad = 9,
  CLDCropThumb = 10,
  CLDCropImaggaCrop = 11,
  CLDCropImaggaScale = 12,
};

typedef SWIFT_ENUM(NSInteger, CLDEffect) {
  CLDEffectHue = 0,
  CLDEffectRed = 1,
  CLDEffectGreen = 2,
  CLDEffectBlue = 3,
  CLDEffectNegate = 4,
  CLDEffectBrightness = 5,
  CLDEffectSepia = 6,
  CLDEffectGrayscale = 7,
  CLDEffectBlackwhite = 8,
  CLDEffectSaturation = 9,
  CLDEffectColorize = 10,
  CLDEffectContrast = 11,
  CLDEffectAutoContrast = 12,
  CLDEffectVibrance = 13,
  CLDEffectAutoColor = 14,
  CLDEffectImprove = 15,
  CLDEffectAutoBrightness = 16,
  CLDEffectFillLight = 17,
  CLDEffectViesusCorrect = 18,
  CLDEffectGamma = 19,
  CLDEffectScreen = 20,
  CLDEffectMultiply = 21,
  CLDEffectOverlay = 22,
  CLDEffectMakeTransparent = 23,
  CLDEffectTrim = 24,
  CLDEffectShadow = 25,
  CLDEffectDistort = 26,
  CLDEffectShear = 27,
  CLDEffectDisplace = 28,
  CLDEffectOilPaint = 29,
  CLDEffectRedeye = 30,
  CLDEffectAdvRedeye = 31,
  CLDEffectVignette = 32,
  CLDEffectGradientFade = 33,
  CLDEffectPixelate = 34,
  CLDEffectPixelateRegion = 35,
  CLDEffectPixelateFaces = 36,
  CLDEffectBlur = 37,
  CLDEffectBlurRegion = 38,
  CLDEffectBlurFaces = 39,
  CLDEffectSharpen = 40,
  CLDEffectUnsharpMask = 41,
  CLDEffectOrderedDither = 42,
};

typedef SWIFT_ENUM(NSInteger, CLDGravity) {
  CLDGravityCenter = 0,
  CLDGravityFace = 1,
  CLDGravityFaceCenter = 2,
  CLDGravityFaces = 3,
  CLDGravityFacesCenter = 4,
  CLDGravityAdvFace = 5,
  CLDGravityAdvFaces = 6,
  CLDGravityAdvEyes = 7,
  CLDGravityNorth = 8,
  CLDGravityNorthWest = 9,
  CLDGravityNorthEast = 10,
  CLDGravitySouth = 11,
  CLDGravitySouthWest = 12,
  CLDGravitySouthEast = 13,
  CLDGravityEast = 14,
  CLDGravityWest = 15,
  CLDGravityXyCenter = 16,
  CLDGravityCustom = 17,
  CLDGravityCustomFace = 18,
  CLDGravityCustomFaces = 19,
  CLDGravityCustomAdvFace = 20,
  CLDGravityCustomAdvFaces = 21,
};

typedef SWIFT_ENUM(NSInteger, CLDType) {
  CLDTypeUpload = 0,
  CLDTypeFetch = 1,
  CLDTypeFacebook = 2,
  CLDTypeTwitter = 3,
  CLDTypeTwitterName = 4,
  CLDTypeSprite = 5,
  CLDTypePrivate = 6,
  CLDTypeAuthenticated = 7,
};


/// A <code>CLDUploadRequest</code> object is returned when creating a data transfer request to Cloudinary, e.g. uploading a file.
/// It allows the options to add a progress closure that is called periodically during the transfer
/// and a response closure to be called once the transfer has finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
SWIFT_CLASS("_TtC10Cloudinary16CLDUploadRequest")
@interface CLDUploadRequest : NSObject
/// Resume the request.
- (void)resume;
/// Suspend the request.
- (void)suspend;
/// Cancel the request.
- (void)cancel;
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDUploadRequest.
- (CLDUploadRequest * _Nonnull)responseRaw:(void (^ _Nonnull)(id _Nullable, NSError * _Nullable))completionHandler;
/// Set a response closure to be called once the request has finished.
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// The same instance of CLDUploadRequest.
- (CLDUploadRequest * _Nonnull)response:(void (^ _Nonnull)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end




/// The CLDUploader class is used to upload assets to your Cloudinary account’s cloud.
SWIFT_CLASS("_TtC10Cloudinary11CLDUploader")
@interface CLDUploader : CLDBaseNetworkObject
/// Uploads the given data to the configured cloud.
/// \param data The data to upload.
///
/// \param params An object holding all the available parameters for uploading.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add a progress closure that is called periodically during the upload
/// and a response closure to be called once the upload is finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDUploadRequest * _Nonnull)signedUploadWithData:(NSData * _Nonnull)data params:(CLDUploadRequestParams * _Nullable)params progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
/// Uploads the given data to the configured cloud.
/// \param data The data to upload.
///
/// \param params An object holding all the available parameters for uploading.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add a progress closure that is called periodically during the upload
/// and a response closure to be called once the upload is finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDUploadRequest * _Nonnull)uploadWithData:(NSData * _Nonnull)data uploadPreset:(NSString * _Nonnull)uploadPreset params:(CLDUploadRequestParams * _Nullable)params progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
/// Uploads a file from the specified URL to the configured cloud.
/// The URL can either be of a local file (i.e. from the bundle) or can point to a remote file.
/// \param url The URL pointing to the file to upload.
///
/// \param params An object holding all the available parameters for uploading.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add a progress closure that is called periodically during the upload
/// and a response closure to be called once the upload is finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDUploadRequest * _Nonnull)signedUploadWithUrl:(NSURL * _Nonnull)url params:(CLDUploadRequestParams * _Nullable)params progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
/// Uploads a file from the specified URL to the configured cloud.
/// The URL can either be of a local file (i.e. from the bundle) or can point to a remote file.
/// \param url The URL pointing to the file to upload.
///
/// \param params An object holding all the available parameters for uploading.
///
/// \param progress The closure that is called periodically during the data transfer.
///
/// \param completionHandler The closure to be called once the request has finished, holding either the response object or the error.
///
///
/// returns:
/// An instance implementing the protocol <code>CLDNetworkDataRequest</code>,
/// allowing the options to add a progress closure that is called periodically during the upload
/// and a response closure to be called once the upload is finished,
/// as well as performing actions on the request, such as cancelling, suspending or resuming it.
- (CLDUploadRequest * _Nonnull)uploadWithUrl:(NSURL * _Nonnull)url uploadPreset:(NSString * _Nonnull)uploadPreset params:(CLDUploadRequestParams * _Nullable)params progress:(void (^ _Nullable)(NSProgress * _Nonnull))progress completionHandler:(void (^ _Nullable)(CLDUploadResult * _Nullable, NSError * _Nullable))completionHandler;
@end


/// The CLDUrl class represents a URL to a remote asset either on your Cloudinary cloud, or from another remote source.
SWIFT_CLASS("_TtC10Cloudinary6CLDUrl")
@interface CLDUrl : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// Set the media source of the URL.
/// \param type the media source to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setPublicId:(NSString * _Nonnull)publicId SWIFT_WARN_UNUSED_RESULT;
/// Set the media source of the URL.
/// \param type the media source to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setTypeFromType:(enum CLDType)type SWIFT_WARN_UNUSED_RESULT;
/// Set the media source of the URL.
/// \param type the media source to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setType:(NSString * _Nonnull)type SWIFT_WARN_UNUSED_RESULT;
/// Set the resource type of the asset the URL points to.
/// \param resourceType the resource type to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setResourceTypeFromUrlResourceType:(enum CLDUrlResourceType)resourceType SWIFT_WARN_UNUSED_RESULT;
/// Set the resource type of the asset the URL points to.
/// \param resourceType the resource type to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setResourceType:(NSString * _Nonnull)resourceType SWIFT_WARN_UNUSED_RESULT;
/// Set the format of the asset the URL points to.
/// \param format the format to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setFormat:(NSString * _Nonnull)format SWIFT_WARN_UNUSED_RESULT;
/// Set the version of the asset the URL points to.
/// \param format the format to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setVersion:(NSString * _Nonnull)version SWIFT_WARN_UNUSED_RESULT;
/// Set the suffix of the URL. (private CDN only, image/upload and raw/upload only).
/// \param suffix the suffix to set.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setSuffix:(NSString * _Nonnull)suffix SWIFT_WARN_UNUSED_RESULT;
/// Set whether or not to use a root path instead of a full path. (image/upload only).
/// \param useRootPath A boolean parameter indicating whether or not to use a root path instead of a full path.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setUseRootPath:(BOOL)useRootPath SWIFT_WARN_UNUSED_RESULT;
/// Set whether or not to use a shorten URL. (image/upload only).
/// \param shortenUrl A boolean parameter indicating whether or not to use a shorten URL.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setShortenUrl:(BOOL)shortenUrl SWIFT_WARN_UNUSED_RESULT;
/// Set the transformation to be apllied on the remote asset.
/// \param transformation The transformation to be apllied on the remote asset.
///
///
/// returns:
/// the same instance of CLDUrl.
- (CLDUrl * _Nonnull)setTransformation:(CLDTransformation * _Nonnull)transformation;
/// Generate a string URL representation of the CLDUrl.
/// \param signUrl A boolean parameter indicating whether or not to generate a signature out of the API secret and add it to the generated URL. Default is false.
///
///
/// returns:
/// The generated string URL representation.
- (NSString * _Nullable)generateWithSignUrl:(BOOL)signUrl SWIFT_WARN_UNUSED_RESULT;
/// Generate a string URL representation of the CLDUrl.
/// \param publicId The remote asset’s name (e.g. the public id of an uploaded image).
///
/// \param signUrl A boolean parameter indicating whether or not to generate a signature out of the API secret and add it to the generated URL. Default is false.
///
///
/// returns:
/// The generated string URL representation.
- (NSString * _Nullable)generate:(NSString * _Nonnull)publicId signUrl:(BOOL)signUrl SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, CLDUrlResourceType) {
  CLDUrlResourceTypeImage = 0,
  CLDUrlResourceTypeRaw = 1,
  CLDUrlResourceTypeVideo = 2,
  CLDUrlResourceTypeAuto = 3,
};


SWIFT_CLASS("_TtC10Cloudinary8CLDVideo")
@interface CLDVideo : CLDBaseResult
@property (nonatomic, readonly, copy) NSString * _Nullable format;
@property (nonatomic, readonly, copy) NSString * _Nullable codec;
@end


@interface UIButton (SWIFT_EXTENSION(Cloudinary))
/// Download an image asynchronously from the specified URL and set it to the UIButton’s image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param url The image URL to download.
///
/// \param state The UIButton’s UIControlState state that uses the specified image.
///
/// \param placeholder A placeholder image to be set as the image untill the asynchronus download request finishes.
///
/// \param networkAdapter A network adapter that implements <code>CLDNetworkAdapter</code>.
/// CLDNetworkDelegate() by default.
///
- (void)cldSetImage:(NSString * _Nonnull)url forState:(UIControlState)state cloudinary:(CLDCloudinary * _Nonnull)cloudinary placeholder:(UIImage * _Nullable)placeholder;
/// Download an image asynchronously from the specified URL and set it to the UIButton’s image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param publicId The remote asset’s name (e.g. the public id of an uploaded image).
///
/// \param cloudinary An instance of CLDCloudinary.
///
/// \param state The UIButton’s UIControlState state that uses the specified image.
///
/// \param signUrl A boolean parameter indicating whether or not to generate a signiture out of the API secret and add it to the generated URL. Default is false.
///
/// \param transformation An instance of CLDTransformation.
///
/// \param placeholder A placeholder image to be set as the background image untill the asynchronus download request finishes.
///
- (void)cldSetImageWithPublicId:(NSString * _Nonnull)publicId cloudinary:(CLDCloudinary * _Nonnull)cloudinary forState:(UIControlState)state signUrl:(BOOL)signUrl transformation:(CLDTransformation * _Nullable)transformation placeholder:(UIImage * _Nullable)placeholder;
/// Download an image asynchronously from the specified URL and set it to the UIButton’s background image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param url The image URL to download.
///
/// \param state The UIButton’s UIControlState state that uses the specified image.
///
/// \param placeholder A placeholder image to be set as the background image untill the asynchronus download request finishes.
///
/// \param networkAdapter A network adapter that implements <code>CLDNetworkAdapter</code>.
/// CLDNetworkDelegate() by default.
///
- (void)cld_setBackgroundImage:(NSString * _Nonnull)url forState:(UIControlState)state cloudinary:(CLDCloudinary * _Nonnull)cloudinary placeholder:(UIImage * _Nullable)placeholder;
/// Download an image asynchronously from the specified URL and set it to the UIButton’s image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param publicId The remote asset’s name (e.g. the public id of an uploaded image).
///
/// \param cloudinary An instance of CLDCloudinary.
///
/// \param state The UIButton’s UIControlState state that uses the specified image.
///
/// \param signUrl A boolean parameter indicating whether or not to generate a signiture out of the API secret and add it to the generated URL. Default is false.
///
/// \param transformation An instance of CLDTransformation.
///
/// \param placeholder A placeholder image to be set as the background image untill the asynchronus download request finishes.
///
- (void)cld_setBackgroundImageWithPublicId:(NSString * _Nonnull)publicId cloudinary:(CLDCloudinary * _Nonnull)cloudinary forState:(UIControlState)state signUrl:(BOOL)signUrl transformation:(CLDTransformation * _Nullable)transformation placeholder:(UIImage * _Nullable)placeholder;
@end


@interface UIImageView (SWIFT_EXTENSION(Cloudinary))
/// Download an image asynchronously from the specified URL and set it to the UIImageView’s image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param url The image URL to download.
///
/// \param cloudinary An instance of CLDCloudinary.
///
/// \param placeholder A placeholder image to be set as the background image untill the asynchronus download request finishes.
///
- (void)cldSetImage:(NSString * _Nonnull)url cloudinary:(CLDCloudinary * _Nonnull)cloudinary placeholder:(UIImage * _Nullable)placeholder;
/// Download an image asynchronously from the specified URL and set it to the UIImageView’s image.
/// The image is retrieved from the cache if it exists, otherwise its downloaded and cached.
/// \param publicId The remote asset’s name (e.g. the public id of an uploaded image).
///
/// \param cloudinary An instance of CLDCloudinary.
///
/// \param signUrl A boolean parameter indicating whether or not to generate a signiture out of the API secret and add it to the generated URL. Default is false.
///
/// \param transformation An instance of CLDTransformation.
///
/// \param placeholder A placeholder image to be set as the background image untill the asynchronus download request finishes.
///
- (void)cldSetImageWithPublicId:(NSString * _Nonnull)publicId cloudinary:(CLDCloudinary * _Nonnull)cloudinary signUrl:(BOOL)signUrl transformation:(CLDTransformation * _Nullable)transformation placeholder:(UIImage * _Nullable)placeholder;
@end


@interface UIView (SWIFT_EXTENSION(Cloudinary))
@end

#pragma clang diagnostic pop
